{
  "name": "geoFence",
  "version": "1.0.3",
  "type": "sensor",
  "script": "/*var options = __.extend(options, {\n    rawData : {\n    \"GLOBAL\":{\n            \"latitude\":\"51.12\",\n            \"longitude\":\"3.51\"\n        }\n    }\n});\n*/\nvar latitude, longitude, runtimeLatitude, runtimeLongitude;\n\nvar sendDistance = function(){\n    var dist = waylayUtil.getDistance(latitude, longitude, runtimeLatitude, runtimeLongitude);\n    var value = {\n        observedState: dist > options.requiredProperties.distance ? \"OUT\" : \"IN\",\n        rawData: {  \n            distance: dist, \n            distanceConfigured: options.requiredProperties.distance,\n            latitude: runtimeLatitude, \n            longitude: runtimeLongitude,  \n            latitudeConfigured:  latitude, \n            longitudeConfigured: longitude\n            \n        }\n    };\n    send(null, value);\n};\n\nlatitude = waylayUtil.getCacheData(options,\"latitudeConfigured\");\nlongitude = waylayUtil.getCacheData(options,\"longitudeConfigured\");\n\ntry{\n    runtimeLatitude = waylayUtil.getStreamData(options, \"latitude\");\n    runtimeLongitude = waylayUtil.getStreamData(options, \"longitude\");    \n} catch(err){\n    send(new Error(err));\n}\n\nif(!runtimeLatitude || !runtimeLongitude){\n    send(new Error(\"runtime location not available\"));\n}\nelse if(latitude && longitude){\n    try{\n        sendDistance()\n    } catch(err){\n        console.log(\"ERROR\");\n        send(new Error(\"calling mashape endpoint\"));\n    }\n}\nelse if(options.requiredProperties.address && options.globalSettings.MASHAPE_KEY && \n        options.requiredProperties.distance && runtimeLongitude && runtimeLatitude){\n    var API_KEY = options.globalSettings.MASHAPE_KEY;\n    unirest.get(\"https://montanaflynn-geocoder.p.mashape.com/address?address=\"+options.requiredProperties.address).header(\"X-Mashape-Key\", API_KEY).end(function (result) {\n        try{\n            console.log(result.body);\n            latitude = result.body[\"latitude\"];\n            longitude = result.body[\"longitude\"];\n            sendDistance();\n        } catch (err){\n          send(new Error(err));\n        }\n\n    }, function(){\n        console.log(\"ERROR\");\n        send(new Error(\"calling mashape endpoint\"));\n    });\n} else {\n    send(new Error(\"Missing properties\"));\n}\n\n",
  "metadata": {
    "author": "Waylay",
    "category": "Location",
    "description": "geoFence calculator based on the runtime location and address.\n<br>\nInput arguments are:\n<ul>\n<li>Address: address from which you want to calculate a distiance</li>\n<li>distance: distance between location coming from the address and real data</li>\n</ul>\n\nRaw data:\n<ul>\n<li>distance</li>\n<li>latitude</li>\n<li>longitude</li>\n<li>latitudeConfigured</li>\n<li>longitudeConfigured</li>\n<li>distanceConfigured</li>\n</ul>\n",
    "iconURL": "https://static.waylay.io/plugs/icons/map.png",
    "supportedStates": [
      "IN",
      "OUT"
    ],
    "requiredProperties": [
      "distance",
      "address"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "distance",
        "dataType": "string"
      },
      {
        "parameter": "latitude",
        "dataType": "double"
      },
      {
        "parameter": "longitude",
        "dataType": "double"
      },
      {
        "parameter": "latitudeConfigured",
        "dataType": "double"
      },
      {
        "parameter": "longitudeConfigured",
        "dataType": "double"
      },
      {
        "parameter": "distanceConfigured",
        "dataType": "double"
      }
    ]
  }
}
