{
  "name": "getDataForResource",
  "version": "1.0.0",
  "type": "sensor",
  "script": "const resource = waylayUtil.getProperty(options, 'resource') || waylayUtil.getResource(options)\nconst streamData = waylayUtil.getStreamData(options) || {}\nconst from = waylayUtil.getProperty(options, 'from')\n\nasync function main () {\n    if (!resource) {\n        throw new Error('Resource required either from task or property')\n    }\n\n    const res = await  waylay.data.getSeries(resource, { metadata: true, _: Date.now() })\n        .catch(() => send(null, { observedState: \"Not Collected\" }))\n    \n    const timeseriesData = _.reduce(res, (acc, metric) => {\n        if(!from || new Date(from) <= new Date(metric.latest.timestamp)) {\n            acc[metric.name] = metric.latest.value\n        }\n        \n        return acc\n    }, {})\n\n    const data = _.merge(timeseriesData, streamData)\n    \n    send(null, { observedState: \"Collected\", rawData: { data } })\n\n}\n\nmain().catch(send)\n",
  "metadata": {
    "author": "Ward",
    "category": "Timeseries",
    "description": "Returns a json object with all metrics that have been received on [resource].\n\nParams\nResource (Defaults to task resource)\nFrom: Only show data that arrived since. (Optional)",
    "iconURL": "https://static.waylay.io/plugs/icons/graph-circle.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "from"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "data",
        "dataType": "double"
      }
    ]
  }
}
