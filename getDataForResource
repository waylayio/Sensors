{
  "name": "getDataForResource",
  "version": "1.1.1",
  "type": "sensor",
  "script": "const resource = waylayUtil.getProperty(options, 'resource') || waylayUtil.getResource(options)\nconst streamData = waylayUtil.getStreamData(options) || {}\nconst from = waylayUtil.getProperty(options, 'from')\n\nconst properties = waylayUtil.getProperty(options, 'required_props') || ''\nconst paths = _.compact(properties.toString().split(',').map(_.trim))\n\nasync function main () {\n    if (!resource) {\n        throw new Error('Resource required either from task or property')\n    }\n\n    const res = await  waylay.data.getSeries(resource, { metadata: true })\n        .catch(() => send(null, { observedState: \"Not Collected\" }))\n    \n    const fromMillis = from.toString().startsWith('P')\n        ? moment() - moment.duration(from)\n        : from\n\n    const timeseriesData = _.reduce(res, (acc, metric) => {\n        if(!fromMillis || new Date(fromMillis) <= new Date(metric.latest.timestamp)) {\n            acc[metric.name] = metric.latest.value\n        }\n        \n        return acc\n    }, {})\n\n    const rawData = _.merge(timeseriesData, streamData)\n    \n    const allRequiredPropsCollected = !_.some(paths, path => rawData[path] === undefined)\n    \n    console.log(paths)\n    \n    send(null, {\n        observedState: allRequiredPropsCollected ? \"Collected\": \"Not Collected\", \n        rawData\n    })\n}\n\nmain().catch(send)\n",
  "metadata": {
    "author": "Ward",
    "category": "Timeseries",
    "description": "Returns a json object with all metrics that have been received on [resource].\n\n<br/>\n<b>Params</b>\n\n<ul>\n <li>resource (Defaults to task resource)</li>\n <li>(Optional) from: Only show data that arrived since. Supports milliseconds or relative PT time</li>\n <li>(Optional) required_props: A comma separated list of properties that are at least required for the sensor to have state Collected.</li>\n</ul>",
    "iconURL": "https://static.waylay.io/plugs/icons/graph-circle.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "from",
      "required_props"
    ],
    "requiredRawData": [],
    "rawData": []
  }
}
