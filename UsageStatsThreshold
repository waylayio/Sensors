{
  "name": "UsageStatsThreshold",
  "version": "0.0.6",
  "type": "sensor",
  "script": "const url = options.globalSettings.waylay_stats || 'https://stats.waylay.io'\nconst timeZone = waylayUtil.getProperty(options, \"timeZone\") || 'Europe/Brussels'\nconst token = options.globalSettings.waylayToken\nconst threshold = waylayUtil.getProperty(options, \"threshold\")\nconst service = waylayUtil.getProperty(options, \"service\")\nconst metricName = waylayUtil.getProperty(options, \"metric\")\n\nvar from = moment().tz(timeZone).startOf('month')\nvar until = moment().tz(timeZone)\n\nif (until.tz() === undefined) {\n    send(new Error(\"Unknown timezone: \" + timeZone))\n} else {\n    console.log('Getting metrics for ' + service + ' from ' + from.format() + ' until ' + until.format())\n    var serviceName = service === 'nativePlug' ? 'engine' : service\n    if (serviceName==='resources') {\n        waylay.resources.search({limit:0})\n        .then( function (response){\n            if (response.total && metricName === 'count') {\n                var consumption = response.total\n                console.log('Consumption ' + consumption)\n                var state = consumption < threshold ? 'BELOW' : (consumption > threshold ? 'ABOVE' : 'EQUAL')\n                send(null, {observedState : state, rawData: { consumption : consumption }})\n            } else {\n                send(new Error('Metric ' + metricName + ' not found for resources'))\n            }\n        })\n        .catch( function (err) {\n            send(err)\n        })\n    } else {\n        requestP({url : url + '/metrics/'+serviceName, auth: { bearer: token }, qs: { from: from.valueOf(), until: until.valueOf() }, json: true})\n        .then( function (response) {\n            var metric = response.results[metricName]\n            if (metric) {\n                var consumption = metric.perMonth.aggregated\n                console.log('Consumption ' + consumption)\n                var state = consumption < threshold ? 'BELOW' : (consumption > threshold ? 'ABOVE' : 'EQUAL')\n                send(null, { observedState: state, rawData: { consumption: consumption }});\n            } else {\n                send(new Error('Metric ' + metricName + ' not found for service ' + service))\n            }\n        })\n        .catch(function (err){\n            send(err)\n        })\n    }\n}",
  "metadata": {
    "author": "",
    "category": "Waylay",
    "description": "Sensor to check Waylay usage metrics.\n\n<p>\nSupported services and metrics are:\n<ul>\n<li>sandbox: executions</li>\n<li>nativePlug: executions</li>\n<li>broker: messages</li>\n<li>webscripts: executions</li>\n<li>resources: count</li>\n</ul>\n</p>\n\n<p>\nRequired parameters:\n<ul>\n<li>threshold</li>\n<li>service: one of <code>sandbox</code>, <code>nativePlug</code>, <code>broker</code>, <code>webscripts</code>, <code>resources</code></li>\n<li>metric: <code>executions</code>, <code>messages</code> or <code>count</code>(see above)</li>\n<li>timeZone: timezone to use to determine begin of month</li>\n</ul>\n</p>\n\n<p>\nIf the specified metric could be successfully retrieved,\nthe value is added as consumption in the rawData\n</p>",
    "iconURL": "https://static.waylay.io/plugs/icons/waylay.png",
    "supportedStates": [
      "BELOW",
      "EQUAL",
      "ABOVE"
    ],
    "requiredProperties": [
      "threshold",
      "service",
      "metric",
      "timeZone"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "consumption",
        "dataType": "double"
      }
    ]
  }
}
