{
  "name": "executeQuery",
  "version": "1.2.1",
  "type": "sensor",
  "script": "const moment = require('moment')\n\nfunction parseISOStringDataInput (input) {\n  const duration = moment.duration(input)\n  return moment().subtract(duration).unix() * 1000\n}\n\nfunction parseTimestamp (timestamp) {\n  if (!isNaN(timestamp)) { return timestamp }\n  if (timestamp && timestamp !== '' && isNaN(timestamp)) { return parseISOStringDataInput(timestamp) }\n}\n\nfunction createQueryOptions (window, from, until, columnwise) {\n  const queryOptions = {}\n\n  if (window) queryOptions.window = window\n  if (from) queryOptions.from = from\n  if (until) queryOptions.until = until\n  queryOptions['render.mode'] = columnwise ? 'RENDER_MODE_SERIES' : 'RENDER_MODE_COMPACT_WS'\n\n  return queryOptions\n}\n\nfunction hasData (response) {\n  return response && response.data && response.data[0].columns && response.data[0].columns.length > 1\n}\n\nfunction processResponse (response, removeTimestamp, columnwise) {\n  const result = response.data[0]\n\n  if (removeTimestamp) {\n    result.columns.shift()\n\n    if (columnwise) { result.data.shift() } else { result.data = result.data.map(row => { row.shift(); return row }) }\n  }\n\n  if (columnwise) {\n    const nestedData = []\n    nestedData.push(result.data)\n    result.data = nestedData\n  }\n\n  return result\n}\n\nasync function execute () {\n  const { queryName, window, from, until } = options.requiredProperties.queryName\n\n  const removeTimestamp = options.requiredProperties.removeTimestamp === 'true'\n  const columnwise = options.requiredProperties.columnwise === 'true'\n\n  const parsedFrom = parseTimestamp(from)\n  const parsedUntil = parseTimestamp(until)\n\n  if (!queryName) { return send(new Error('No valid queryName supplied.')) }\n  if (window && parsedFrom && parsedUntil) { return send(new Error('Only specify 2 out of the window, from and until properties.')) }\n\n  const queryOptions = createQueryOptions(window, parsedFrom, parsedUntil, columnwise)\n\n  const response = await waylay.analytics.getQueryData(queryName, queryOptions)\n    .catch(error => {\n      send(error)\n    })\n\n  const result = hasData(response) && processResponse(response, removeTimestamp, columnwise)\n\n  send(null, {\n    observedState: result ? 'Collected' : 'Not Collected',\n    rawData: result || response\n  })\n}\n\nexecute()",
  "metadata": {
    "author": "",
    "category": "",
    "description": "Get the data as specified by a certain data query.",
    "documentationURL": "https://docs.waylay.io/plugins/executequery/",
    "iconURL": "https://static.waylay.io/icons/query_designer.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "queryName",
      "window",
      "from",
      "until",
      "removeTimestamp",
      "columnwise"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "data",
        "dataType": "object[]"
      },
      {
        "parameter": "columns",
        "dataType": "object[]"
      }
    ],
    "configuration": [
      {
        "name": "queryName",
        "type": "string",
        "mandatory": true,
        "defaultValue": ""
      },
      {
        "name": "window",
        "type": "string",
        "mandatory": false,
        "defaultValue": ""
      },
      {
        "name": "from",
        "type": "string",
        "mandatory": false,
        "defaultValue": ""
      },
      {
        "name": "until",
        "type": "string",
        "mandatory": false,
        "defaultValue": ""
      },
      {
        "name": "removeTimestamp",
        "type": "boolean",
        "mandatory": false,
        "defaultValue": false
      },
      {
        "name": "columnwise",
        "type": "boolean",
        "mandatory": false,
        "defaultValue": false
      }
    ]
  },
  "dependencies": {
    "moment": "^2.29.1"
  }
}