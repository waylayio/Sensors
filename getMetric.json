{
  "name": "getMetric",
  "version": "2.0.1",
  "type": "sensor",
  "script": "const moment = require('moment')\nconst { resource, metric } = options.requiredProperties\n\nfunction parseISOStringDataInput (input) {\n  const duration = moment.duration(input)\n  return moment().subtract(duration).unix() * 1000\n}\n\nfunction parseTimestamp (timestamp) {\n  if (!isNaN(timestamp)) { return timestamp }\n  if (timestamp && timestamp !== '' && isNaN(timestamp)) { return parseISOStringDataInput(timestamp) }\n}\n\nfunction createQueryParams (options) {\n  let {\n    from,\n    to,\n    grouping,\n    aggregate\n  } = options.requiredProperties\n\n  const queryParams = {}\n\n  if (from) queryParams.from = parseTimestamp(from)\n  if (to) queryParams.until = parseTimestamp(to)\n\n  if ((from === null || from === '') && (aggregate === null || aggregate === '')) {\n    queryParams.from = new Date() - 60 * 60 * 1000 // One hour ago\n    aggregate = 'mean'\n  }\n\n  if (grouping && grouping !== '') queryParams.grouping = grouping\n  if (aggregate && aggregate !== '') queryParams.aggregate = aggregate\n\n  return queryParams\n}\n\nasync function execute () {\n  if (!resource) {\n    return send(new Error('Resource not defined'))\n  }\n  if (!metric) {\n    return send(new Error('Please specify metric'))\n  }\n\n  const queryParams = createQueryParams(options)\n  console.log('qs', queryParams)\n\n  const response = await waylay.data.getMetricSeries(resource, metric, queryParams)\n    .catch(error => {\n      console.error(error)\n      send(new Error('Error getting data: ' + error))\n    })\n\n  response.series = response.series.filter(d => d[1] !== null)\n  send(null, {\n    observedState: response.series.length > 0 ? 'Collected' : 'Not Collected',\n    rawData: response\n  })\n}\n\nexecute()\n",
  "metadata": {
    "author": "",
    "description": "<h4>getMetric Sensor</h4>\n<br>\nGives back the time series data of one metric.\nResource should be provided from the one assoisated with this sensor.\n<br><br>\n<b>States</b>\n<br>\n<ul>\n    <li>\n        State:\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>\n        data: desc\n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li>\n        resource: the resource you want to get a metric from\n    </li>\n    <li>\n        metric: name of the metric to query\n    </li>\n    <li>\n        from (optional): epoch time in milliseconds or <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO_8601 duration </a> (when left empty, will query data for the past hour)\n    </li>\n    <li>\n        to (optional): epoch time in milliseconds (when left empty it will take the current time).\n    </li>\n    <li>\n        aggregate:\n        <ul>\n            <li>mean</li> \n            <li>medium</li>  \n            <li>min</li> \n            <li>max</li> \n            <li>sum</li> \n        </ul>\n    </li>\n    <li>\n        grouping:\n        <ul>\n            <li>none (just skip in the query)</li>\n            <li>auto</li>\n            <li>second</li>\n            <li>minute</li>\n            <li>hour</li>\n            <li>day</li>\n            <li>week</li>\n        </ul>\n    </li>\n</ul>\n",
    "documentationURL": "https://docs.waylay.io/plugins/getmetric/",
    "iconURL": "https://static.waylay.io/plugs/icons/timeseries.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "metric",
      "from",
      "to",
      "aggregate",
      "grouping"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "series",
        "dataType": "object[]"
      },
      {
        "parameter": "query",
        "dataType": "object"
      }
    ],
    "configuration": [
      {
        "name": "resource",
        "type": "string",
        "mandatory": true,
        "format": {
          "type": "resource"
        },
        "defaultValue": ""
      },
      {
        "name": "metric",
        "type": "string",
        "mandatory": true,
        "format": {},
        "defaultValue": ""
      },
      {
        "name": "from",
        "type": "string",
        "mandatory": false,
        "format": {
          "type": "enum",
          "values": [
            "PT1M",
            "PT5M",
            "PT30M",
            "PT1H",
            "PT3H",
            "PT12H",
            "PT24H"
          ]
        },
        "defaultValue": "PT30M"
      },
      {
        "name": "to",
        "type": "string",
        "mandatory": false,
        "format": {},
        "defaultValue": ""
      },
      {
        "name": "aggregate",
        "type": "string",
        "mandatory": true,
        "format": {
          "type": "enum",
          "values": [
            "mean",
            "medium",
            "min",
            "max",
            "sum"
          ]
        },
        "defaultValue": "mean"
      },
      {
        "name": "grouping",
        "type": "string",
        "mandatory": true,
        "format": {
          "type": "enum",
          "values": [
            "none",
            "auto",
            "second",
            "minute",
            "hour",
            "day",
            "week"
          ]
        },
        "defaultValue": "auto"
      }
    ]
  },
  "dependencies": {
    "moment": "^2.29.1"
  }
}