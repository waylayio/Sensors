{
  "name": "getAssetFromSalesForce",
  "version": "1.0.1",
  "type": "sensor",
  "script": "const jsforce = require('jsforce')\nconst pify = require('pify')\nconst _ = require('lodash')\n\nasync function main () {\n  const caseObject = cleanObject({\n    SerialNumber: options.requiredProperties.serialNumber,\n    Name: options.requiredProperties.name,\n    Id: options.requiredProperties.id\n  })\n\n  const conn = await getSalesforceConnection()\n\n  const SfAsset = pify(conn.sobject('Asset'))\n\n  const res = await SfAsset.find(caseObject)\n\n  if (res.length > 0) {\n    send(null, { observedState: 'Found', rawData: res[0] })\n  } else {\n    send(null, { observedState: 'Not Found' })\n  }\n}\n\nasync function getSalesforceConnection () {\n  try {\n    const { access_token: accessToken } = await waylay.hoard.getTokens('salesforce', { scope: 'organisation' })\n\n    if (!accessToken) {\n      throw new Error('No user or token provided via Hoard service')\n    }\n\n    const jsclient = new jsforce.Connection({\n      instanceUrl: 'https://eu26.salesforce.com',\n      accessToken\n    })\n\n    return jsclient\n  } catch (error) {\n    throw new Error(`error: ${error} \\n possible solution: Connect Salesforce through the connections`)\n  }\n}\n\n/**\n * remove empty values in object before sending to salesforce\n */\nfunction cleanObject (object) {\n  return _.reduce(object, (acc, v, k) => {\n    if (v) acc[k] = v\n    return acc\n  }, {})\n}\n\nmain().catch(send)\n",
  "metadata": {
    "author": "",
    "description": "<h4>getAssetFromSalesForce</h4>\n<br>\nreturn an Asset from Salesforce\n<br><br>\n<b>States</b>\n<br>\n<ul>\n    <li>Found</li>\n    <li>Not Found</li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>ContactId</li>\n    <li>AccountId</li>\n    <li>Product2Id</li>\n    <li>SerialNumber</li>\n    <li>InstallDate</li>\n    <li>Status</li>\n    <li>Price</li>\n    <li>Description</li>\n    <li>OwnerId</li>\n    <li>Name</li>\n    <li>Quantity</li>\n\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n   <li>serialNumber</li>\n   <li>id</li>\n   <li>name</li>\n</ul>",
    "documentationURL": "https://docs.waylay.io/plugins/getassetfromsalesforce/",
    "iconURL": "https://static.waylay.io/plugs/icons/get-asset-from-salesforce.png",
    "supportedStates": [
      "Found",
      "Not Found"
    ],
    "requiredProperties": [
      "serialNumber",
      "id",
      "name"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "ContactId",
        "dataType": "string"
      },
      {
        "parameter": "AccountId",
        "dataType": "string"
      },
      {
        "parameter": "Product2Id",
        "dataType": "string"
      },
      {
        "parameter": "SerialNumber",
        "dataType": "integer"
      },
      {
        "parameter": "InstallDate",
        "dataType": "string"
      },
      {
        "parameter": "Status",
        "dataType": "string"
      },
      {
        "parameter": "Price",
        "dataType": "double"
      },
      {
        "parameter": "Description",
        "dataType": "string"
      },
      {
        "parameter": "OwnerId",
        "dataType": "string"
      },
      {
        "parameter": "Name",
        "dataType": "string"
      },
      {
        "parameter": "Quantity",
        "dataType": "double"
      }
    ],
    "configuration": [
      {
        "name": "serialNumber",
        "type": "string",
        "mandatory": false,
        "defaultValue": ""
      },
      {
        "name": "id",
        "type": "string",
        "mandatory": false,
        "defaultValue": ""
      },
      {
        "name": "name",
        "type": "string",
        "mandatory": false,
        "defaultValue": ""
      }
    ]
  },
  "dependencies": {
    "jsforce": "^1.10.0",
    "pify": "^5.0.0",
    "lodash": "^4.17.15"
  }
}