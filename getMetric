{"name":"getMetric","version":"1.2.3","type":"sensor","script":"const moment = require('moment')\n\nfunction parseISOStringDataInput (input) {\n  const duration = moment.duration(input)\n  return moment().subtract(duration).unix() * 1000\n}\n\nfunction parseTimestamp (timestamp) {\n  if (!isNaN(timestamp)) { return timestamp }\n  if (timestamp && timestamp !== '' && isNaN(timestamp)) { return parseISOStringDataInput(timestamp) }\n}\n\nfunction createQueryParams (options) {\n  let {\n    from,\n    to,\n    grouping,\n    aggregate\n  } = options.requiredProperties\n\n  const queryParams = {}\n\n  if (from) queryParams.from = parseTimestamp(from)\n  if (to) queryParams.until = parseTimestamp(to)\n\n  if ((from === null || from === '') && (aggregate === null || aggregate === '')) {\n    queryParams.from = new Date() - 60 * 60 * 1000 // One hour ago\n    aggregate = 'mean'\n  }\n\n  if (grouping && grouping !== '') queryParams.grouping = grouping\n  if (aggregate && aggregate !== '') queryParams.aggregate = aggregate\n\n  return queryParams\n}\n\nasync function execute () {\n  waylay.data.baseUrl = options.globalSettings.waylay_data || 'https://data.waylay.io'\n\n  const {\n    metric\n  } = options.requiredProperties\n  const resource = waylayUtil.getResource(options)\n\n  if (!resource || !metric) { return send(new Error('Please specify resource and metric')) }\n\n  const queryParams = createQueryParams(options)\n  console.log('qs', queryParams)\n\n  const response = await waylay.data.getMetricSeries(resource, metric, queryParams)\n    .catch(err => {\n      console.log('err', err)\n      const errorMessage = err.response\n      if (errorMessage && errorMessage.status === 400) { send(new Error('Too many data points for chosen aggregation')) } else { send(new Error('Error getting data')) }\n    })\n\n  response.series = response.series.filter(d => d[1] !== null)\n  send(null, {\n    observedState: response.series.length > 0 ? 'Collected' : 'Not Collected',\n    rawData: response\n  })\n}\n\nexecute()","metadata":{"author":"","category":"Data","description":"Gives back the time series data of one metric.\nResource should be provided from the one assoisated with this sensor.\n\nYou can specify from (epoch time in milliseconds) and to (it can be omitted, then it will take the current time).\nIf from is omitted it will query data for the past hour.\n\nFrom and to field can also provide duration (such as P1M, P1D etc), based on ISO_8601 \n\nYou can get data on which already grouping and/or aggregation is computed. \nFor more info, please check documentaion\nAggregation:\n<ul>\n<li>mean</li> \n<li>medium</li>  \n<li>min</li> \n<li>max</li> \n<li>sum</li> \n</ul>\nGrouped by: \n<ul>\n<li>none (just skip in the query)</li>\n<li>auto</li>\n<li>second</li>\n<li>minute</li>\n<li>hour</li>\n<li>day</li>\n<li>week</li>\n</ul>\n\n","iconURL":"https://static.waylay.io/plugs/icons/timeseries.png","supportedStates":["Collected","Not Collected"],"requiredProperties":["metric","from","to","aggregate","grouping"],"requiredRawData":[],"rawData":[{"parameter":"series","dataType":"object[]"},{"parameter":"query","dataType":"double"}]},"dependencies":{"moment":"2.29.1"}}