{
  "name": "iterateDate",
  "version": "0.0.6",
  "type": "sensor",
  "script": "var stream = waylayUtil.getStreamData(options)\nconsole.log(\"stream \", stream)  \nvar days;\n\n//reset if hit from outside\nif(_.isEmpty(stream)){\n  days = waylayUtil.getCacheData(options, \"days\"); \n  console.log(\"cached days \", days)    \n  if(days === undefined)\n    days = 0;\n} else {\n    console.log(\"reset days \")  \n    days = 0;\n}\n\nvar stopDate;\nvar startDate;\n\ntry{\n   startDate = waylayUtil.getRawData(options, options.requiredProperties.startDate) \n} catch(err){\n   startDate =  options.requiredProperties.startDate;\n}\ntry{\n   stopDate = waylayUtil.getRawData(options, options.requiredProperties.stopDate) \n} catch(err){\n   stopDate =  options.requiredProperties.stopDate;\n}\n\nif(moment(stopDate) === undefined || moment(startDate) === undefined){\n    send(new Error(\"Missing dates or wrong format\"))\n} else {\n    var date = moment(startDate).add(days, 'day')\n    stopDate = moment(stopDate)\n    days +=1;\n    if(date >= stopDate)\n        send(null, { observedState : \"Done\", rawData : { days:days, date: date.format(\"YYYY-MM-DD\"), timestamp: date.unix()* 1000} })\n    else \n        send(null, { observedState : \"Iterating\", rawData : { days: days, date: date.format(\"YYYY-MM-DD\"), timestamp: date.unix()* 1000} })\n}\n",
  "metadata": {
    "author": "Waylay",
    "category": "Experimental",
    "description": "Iterate sensor, date in format <strong>YYYY-MM-DD</strong>",
    "iconURL": "https://static.waylay.io/plugs/icons/articlesappinapps_java_date1.png",
    "supportedStates": [
      "Iterating",
      "Done"
    ],
    "requiredProperties": [
      "stopDate",
      "startDate"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "date",
        "dataType": "string"
      },
      {
        "parameter": "days",
        "dataType": "double"
      },
      {
        "parameter": "timestamp",
        "dataType": "double"
      }
    ]
  }
}
