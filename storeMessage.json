{
  "name": "storeMessage",
  "version": "1.0.0",
  "type": "sensor",
  "script": "async function execute () {\n  const { payload } = options.requiredProperties\n\n  const body = parsePayload(payload)\n\n  const resource = options.requiredProperties.resource\n\n  if (!resource) {\n    return send(new Error('No resource provided'))\n  }\n\n  await waylay.data.postSeries(resource, body, { forward: false, store: true })\n\n  send(null, { observedState: 'Success' })\n}\n\nfunction parsePayload (payload) {\n  if (!payload) {\n    return send(new Error('No payload provided'))\n  }\n\n  try {\n    payload = typeof payload === 'string' ? JSON.parse(payload) : payload\n  } catch (_) {\n    console.log(payload)\n    return send(new Error('payload has to be a valid JSON object'))\n  }\n\n  return payload\n}\n\nexecute().catch((error) => {\n  send(null, { observedState: 'Error', rawData: { errorMessage: 'Failed to store message: ' + error.message } })\n})\n",
  "metadata": {
    "author": "",
    "description": "<h4>storeMessage</h4>\n<br>\nStore the provided object on the specified resource\n<br><br>\n<b>States</b>\n<ul>\n    <li>\n        Success: The action was executed successfully \n    </li>\n    <li>\n        Error: The action execution failed\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>\n        errorMessage: (only returned on Error state) \n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li>\n        payload: JSON object to store on the specified resource.\n    </li>\n</ul>",
    "documentationURL": "https://docs.waylay.io/plugins/storemessage/",
    "iconURL": "https://static.waylay.io/icons/store-message.png",
    "supportedStates": [
      "Success",
      "Error"
    ],
    "requiredProperties": [
      "payload",
      "resource"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "errorMessage",
        "dataType": "string"
      }
    ]
  }
}