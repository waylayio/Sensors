{
  "name": "getAggregatedValueFromTS",
  "version": "1.2.0",
  "type": "sensor",
  "script": "waylay.data.baseUrl = options.globalSettings.waylay_data ||  \"https://data.waylay.io\";\n\nvar resource  = waylayUtil.getProperty(options, \"resource\") || waylayUtil.getResource(options) ;\n\nvar metric = waylayUtil.getProperty(options, \"metric\");\nvar minutes =  waylayUtil.getProperty(options, \"minutes\") || 30;\nvar aggregation = waylayUtil.getProperty(options, \"aggregation\") || 'mean';\n\nvar sampling_aggregation =  waylayUtil.getProperty(options, \"sampling aggregation\");\nvar sampling_groupby = waylayUtil.getProperty(options, \"sampling group by\");\n\nvar from = moment().subtract(parseInt(minutes),'minutes');\nvar qs = {from: from.unix() * 1000, aggregate: sampling_aggregation, grouping: sampling_groupby};\n\nwaylay.data.baseUrl = options.globalSettings.waylay_data ||  \"https://data.waylay.io\";\n\nif ((!metric) || (!minutes) || (!aggregation) || (!resource) || (!sampling_aggregation) || (!sampling_groupby)) {\n    console.log(\"Please enter at least a value for the properties resource, metric, aggregation, sampling aggregation and sampling group by\");\n    send( new Error(\"Missing properties\"));\n} else {\n\n\nwaylay.data.getMetricSeries(resource, metric, qs)\n.then(data => {\n    //we remove all null values\n    data.series = _.reject(data.series, o=>{ return o[1] === null });\n    var valuesonly = _.map(data.series, _.last);\n\n    if(valuesonly.length > 0) {\n       var calculated_result = 0;\n       if (aggregation == 'avg') calculated_result = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0)/valuesonly.length;\n       if (aggregation == 'mean') calculated_result = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0)/valuesonly.length;\n       if (aggregation == 'min') calculated_result = _.min(valuesonly);\n       if (aggregation == 'max') calculated_result = _.max(valuesonly);\n       if (aggregation == 'sum') calculated_result = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0);\n       if (aggregation == 'median') { \n            var sortedvalues = _.sortBy(valuesonly, function(num){return num;});\n            var lowMiddle = Math.floor((sortedvalues.length - 1) / 2);\n            var highMiddle = Math.ceil((sortedvalues.length - 1) / 2);\n            calculated_result = (sortedvalues[lowMiddle] + sortedvalues[highMiddle]) / 2;\n       }\n       if (aggregation == 'std') {\n           var setMean = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0)/valuesonly.length;\n\t\t   var totalDeviation = _.reduce(valuesonly, function(num1, num2){ return num1 + Math.pow(num2-setMean, 2);  },0);\n           calculated_result = Math.sqrt(totalDeviation/valuesonly.length);\n       }\n\n       var rawData = {};\n       rawData.result = calculated_result;\n       rawData.count = data.series.length;\n       rawData.data =  data.series;\n       var value = {\n            observedState: \"Collected\",\n            rawData: rawData\n        };\n        send(null, value);\n    } else {\n            send(null, {observedState : \"Not Collected\"});\n    }\n})\n.catch(err=> {\n   if (err.message == \"Request failed with status code 400\") console.log(\"You exceeded the 2000 datapoint limit. Please change your sampling 'group by'\");\n   console.log('err',err.message);\n   send(new Error(err));\n});\n\n}         ",
  "metadata": {
    "author": "Waylay",
    "category": "Waylay",
    "description": "Get an aggregated value from the time series database for the past minutes. \nResource is etiher provided from the input field, raw data or from the resource \nassociated with a node to which this sensor is attached.\n\nIt is recommended to enter the appropriate sampling aggregation and grouping because you can only fetch 2000 datapoints from the time series database.\n\nInput arguments are: <br>\n<ul>\n<li>resource</li>\n<li>metric</li>\n<li>past minutes, default 30 minutes</li>\n<li>Aggregation (after sampling):\n<ul>\n<li>mean</li> \n<li>median</li>  \n<li>min</li> \n<li>max</li> \n<li>sum</li>\n<li>avg</li>\n<li>std</li>\n</ul>\n</li>\n<li>Sampling aggregation:\n<ul>\n<li>mean</li> \n<li>median</li>  \n<li>min</li> \n<li>max</li> \n<li>sum</li>\n<li>avg</li>\n<li>count</li>\n<li>count-numeric</li>\n<li>count-non-numeric</li>\n<li>first</li>\n<li>last</li>\n<li>std</li>\n<li>percentile(n), where 0 < n <= 1</li>\n</ul>\n</li>\n<li>Sampling group by:\n<ul>\n<li>second</li> \n<li>minute</li>\n<li>hour</li>\n<li>day</li>\n<li>week</li>\n<li>or you can use ISO-8601 duration format</li>\n</ul>\n</li>\n</ul>\n",
    "iconURL": "https://static.waylay.io/plugs/icons/graph-circle.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "metric",
      "minutes",
      "aggregation",
      "sampling aggregation",
      "sampling group by"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "data",
        "dataType": "object[]"
      },
      {
        "parameter": "count",
        "dataType": "integer"
      },
      {
        "parameter": "result",
        "dataType": "double"
      }
    ]
  }
}
