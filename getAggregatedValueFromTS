{
  "name": "getAggregatedValueFromTS",
  "version": "1.1.2",
  "type": "sensor",
  "script": "waylay.data.baseUrl = options.globalSettings.waylay_data ||  \"https://data.waylay.io\";\n\nvar resource  = waylayUtil.getProperty(options, \"resource\") || waylayUtil.getResource(options) ;\n\nvar metric = waylayUtil.getProperty(options, \"metric\");\nvar minutes =  waylayUtil.getProperty(options, \"minutes\") || 30;\nvar aggregation = waylayUtil.getProperty(options, \"aggregation\");\n\n\nvar from = moment().subtract(parseInt(minutes),'minutes');\nvar qs = {from: from.unix() * 1000};\n\nwaylay.data.baseUrl = options.globalSettings.waylay_data ||  \"https://data.waylay.io\";\n\n\nwaylay.data.getMetricSeries(resource, metric, qs)\n.then(data => {\n    data.series = _.reject(data.series, o=>{ return o[1] === null })\n    var valuesonly = _.map(data.series, _.last);\n\n    if(valuesonly.length > 0) {\n       var calculated_result = 0;\n       if (aggregation == 'avg') calculated_result = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0)/valuesonly.length;\n       if (aggregation == 'mean') calculated_result = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0)/valuesonly.length;\n       if (aggregation == 'min') calculated_result = _.min(valuesonly);\n       if (aggregation == 'max') calculated_result = _.max(valuesonly);\n       if (aggregation == 'sum') calculated_result = _.reduce(valuesonly, function(num1, num2){ return num1 + num2; }, 0);\n       if (aggregation == 'median') { \n            let sortedvalues = _.sortBy(valuesonly, function(num){return num;});\n            let lowMiddle = Math.floor((sortedvalues.length - 1) / 2);\n            let highMiddle = Math.ceil((sortedvalues.length - 1) / 2);\n            calculated_result = (sortedvalues[lowMiddle] + sortedvalues[highMiddle]) / 2;\n       }\n\n       var rawData = {};\n       rawData.result = calculated_result;\n       rawData.count = data.series.length;\n       rawData.data =  data.series;\n       var value = {\n            observedState: \"Collected\",\n            rawData: rawData\n        };\n        send(null, value);\n    } else {\n            send(null, {observedState : \"Not Collected\"});\n    }\n})\n.catch(err=> {\n    console.log(err);\n     send(null, new Error(err));\n})\n\n         ",
  "metadata": {
    "author": "Waylay",
    "category": "Waylay",
    "description": "Get an aggregated value from the time series database for the past minutes. \nResource is etiher provided from the input field, raw data or from the resource \nassociated with a node to which this sensor is attached.\n\nInput arguments are: <br>\n<ul>\n<li>resource</li>\n<li>metric</li>\n<li>past minutes, default 30 minutes</li>\n<li>Aggregation:\n<ul>\n<li>mean</li> \n<li>median</li>  \n<li>min</li> \n<li>max</li> \n<li>sum</li>\n<li>avg</li>\n</ul>\n</li>\n</ul>\n\n\n",
    "iconURL": "https://static.waylay.io/plugs/icons/graph-circle.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "metric",
      "minutes",
      "aggregation"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "data",
        "dataType": "object[]"
      },
      {
        "parameter": "count",
        "dataType": "integer"
      },
      {
        "parameter": "result",
        "dataType": "double"
      }
    ]
  }
}
