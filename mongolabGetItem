{
  "name": "mongolabGetItem",
  "version": "1.0.5",
  "type": "sensor",
  "script": "var db = options.globalSettings.mongodb;\nvar token = options.globalSettings.mongoKey;\nvar collection = options.requiredProperties.collection;\nvar key = options.requiredProperties.key;\nvar value = waylayUtil.getProperty(options, \"value\") || waylayUtil.getResource(options)\n\nif(value !== undefined && token !== undefined && db !== undefined && collection !== undefined && key !== undefined){\n  var url = \"https://api.mongolab.com/api/1/databases/\"+ db +\"/collections/\"+ collection +\"?apiKey=\"+token;\n  var options = {\n    url: url\n  };\n  var callback = function(error, response, body) {\n    if (!error && response.statusCode == 200) {\n      var data = JSON.parse(body);\n      var itemDB = _.find(data, function(d) { \n          if(Array.isArray(d[key]))\n            return (d[key].indexOf(value) > -1);\n          else\n            return (d[key] == value);\n      });\n      console.log(itemDB)\n      var state = itemDB ?  \"Found\" : \"Not Found\";\n      send(null, {\n        observedState: state,\n        rawData: itemDB\n        });\n    }else{\n      send(new Error(\"Calling mongolab failed: \" + error + \" \" + body));\n    }\n  };\n  request.get(options, callback);\n}else{\n  send(new Error(\"Missing input parameters\"));\n}",
  "metadata": {
    "author": "",
    "category": "Database",
    "description": "Generic mongolab that returns back the item in the database.\nShould be replace with more specific one for your use case.\nYou need API mongoKey.\n\nInput parameters are:\n<ul>\n<li>identifier(key) which will be used to match the entry in the collection</li>\n<li>item (value), or you can as well provide here another sensor name that has an item in rawData response</li>\n<li>database</li>\n</ul>\n",
    "iconURL": "https://static.waylay.io/plugs/icons/mongolab.png",
    "supportedStates": [
      "Found",
      "Not Found"
    ],
    "requiredProperties": [
      "key",
      "value",
      "collection"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "_id",
        "dataType": "object"
      }
    ]
  }
}
