{"name":"isParameterEqual","version":"0.0.3","type":"sensor","script":"/* var options = __.extend(options, { \n    rawData : {\n        \"hello\" : {   \n            randomValue: 5,\n            state: \"True\" ,\n            array: [\"hello\", \"world\"],\n            items : [{ name :'vele'}],\n            data: [{temperature:21}, {temperature:24}]\n        }\n    }\n});\n\n\nparameter can be:\nrandomValue\nstate\narray contains hello\nitems[?(@.name == 'vele')]\ndata[?(@.temperature === 21)]\ndata[?(@.temperature &gt 21)]\n*/\n//console.log(options);\n\nvar param = options.requiredProperties.parameter\nvar node = options.requiredProperties.node || waylayUtil.getAttachedSensorName(options)\nvar expectedValue = options.requiredProperties.value\nif(node !== undefined && param !== undefined && expectedValue !== undefined) {\n    try{\n        var rest ;\n        if(param.split(\" \").length === 3 && param.split(\" \")[1] == \"contains\"){\n            if(param.split(\" \")[2] == \"node.NAME\")\n               rest = options.node.NAME;\n            if(param.split(\" \")[2] == \"node.RESOURCE\")\n                options.node.RESOURCE;\n            rest = param.split(\" \")[2];\n            param = param.split(\" \")[0];\n        }\n        var searchString = node +\".\" + param;\n        var rawValue =  waylayUtil.evaluateData(options, searchString);\n        console.log(rawValue);\n        if(rawValue === undefined || rawValue == searchString)\n           rawValue = undefined;\n        if(rawValue !== undefined && rest !== undefined){\n            rawValue = rawValue[__.indexOf(rawValue, rest)];\n            //rawValue = __.contains(rawValue[0], rest);\n        }\n        //empty array should also return NO\n        if(Array.isArray(rawValue) && rawValue.length === 0) {\n          rawValue = undefined;\n        }\n        send(null, {\n            observedState: rawValue==expectedValue ? \"YES\" : \"NO\",\n            rawData:  {  value: rawValue }  \n        });\n        } catch(err){\n            console.log(\"error\" + err);\n            send(null, {observedState: \"NO\"});\n        }\n} else{\n  send(new Error(\"Missing properties\"));\n}\n","metadata":{"author":"","category":"Functions","description":"Verifies if the node has returned a given rawData parameter. \nIf exists, it will return YES if the given rawData parameter equals (==) the given value, \notherwise it will return back state NO.\n\nInput parameters are:\n<ul>\n<li>node for which we want to check the if the raw parameter is available</li>\n<li>parameter of the rawData response or JSONPath expression</li>\n<li>value to check for equality</li>\n</ul>\n\nExamples of parameter entries:\nrawData : {\n        \"hello\" : {   \n            randomValue: 5,\n            state: \"True\" ,\n            array: [\"hello\", \"world\"],\n            items : [{ name :'vele'}],\n            data: [{temperature:21}, {temperature:24}]\n        }\n}\nand input parameter can be something like this (they would all return YES):    \n<ul>\n<li>randomValue</li>\n<li>state</li>\n<li>array contains hello</li>\n<li>items[?(@.name == 'vele')]</li>\n<li>data[?(@.temperature === 21)]</li>\n<li>data[?(@.temperature &gt 21)]</li>\n</ul>","iconURL":"https://static.waylay.io/plugs/icons/equality.png","supportedStates":["YES","NO"],"requiredProperties":["node","parameter","value"],"requiredRawData":[],"rawData":[{"parameter":"value","dataType":"double"}]}}
