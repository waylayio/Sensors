{
  "name": "timeSeriesSensor",
  "version": "1.3.4",
  "type": "sensor",
  "script": "var resource  = waylayUtil.getProperty(options, \"resource\") || waylayUtil.getResource(options) \nvar metric = waylayUtil.getProperty(options, \"metric\")\nvar from = waylayUtil.getProperty(options, \"from\")\nvar to = waylayUtil.getProperty(options, \"to\")\nvar grouping = waylayUtil.getProperty(options, \"grouping\")\nvar aggregate = waylayUtil.getProperty(options, \"aggregate\")\nvar qs = {}\nwaylay.data.baseUrl =   options.globalSettings.waylay_data ||  \"https://data.waylay.io\"\n\nconst streamValue = waylayUtil.getStreamData(options, metric)\nconsole.log('streamData', streamValue)\n\nvar parseISOStringDataInput = function(input) {\n  console.log('parse from as a string', input)\n  var duration = moment.duration(input)\n  console.log('duration', duration.humanize())\n  return moment().subtract(duration).unix() * 1000\n}\n\nif(from !== '' && isNaN(from)) {\n  qs.from = parseISOStringDataInput(from)\n} else { \n    if(!isNaN(from))\n        qs.from = from\n}\n\n\nif(from === '' && aggregate === '') {\n    from = moment().subtract(1, 'hour')  \n    qs.from = from.unix() * 1000\n    aggregate = 'mean'\n}\n\nif(to !== '' && isNaN(to)) {\n  qs.until = parseISOStringDataInput(to)\n}  else { \n    if(to !== '' && !isNaN(to))\n        qs.until = to\n}\n\n    \nif(grouping && grouping !==\"\")\n    qs.grouping = grouping\nif(aggregate && aggregate !==\"\")\n    qs.aggregate = aggregate\n    \nconsole.log('qs', qs)\n\nwaylay.data.getMetricSeries(resource, metric, qs)\n.then(response=>{\n    response.series = _.filter(response.series, d => {return d[1] !== null})\n\n    if(!to && response.series.length !== 0 && streamValue) {\n        const last = _.last(response.series)[1]\n        const shouldReplaceMin = aggregate === 'min' && last > streamValue\n        const shouldReplaceMax = aggregate === 'max' && last < streamValue\n        if (!aggregate || ['min', 'max', 'first', 'last'].indexOf(aggregate) !== -1) {\n            \n\n            if (shouldReplaceMax || shouldReplaceMin || aggregate === 'last') {\n                response.series[response.series.length -1] = [Date.now(), streamValue]\n            }\n\n            if (!aggregate) {\n                response.series.push([Date.now(), streamValue])\n            }\n        }\n    } else if (!to && streamValue) {\n        response.series.push([Date.now(), streamValue])\n    }\n\n    response.latest = _.get(_.last(response.series), '1')\n\n    send(null, {\n        observedState : response.series.length> 0 ? \"Collected\": \"Not Collected\", \n        rawData : response\n    })\n})\n.catch(err=> {\n    console.log('err', err)\n    var errorMessage =  err.response\n    if(errorMessage && errorMessage.status === 400)\n        send(new Error('too many data points for chosen aggregation'))\n    else\n        send(new Error('Error getting data'))\n})",
  "metadata": {
    "author": "Waylay",
    "category": "Timeseries",
    "description": "Gives back the time series data.\nResource is etiher provided from the input field, raw data or from the resource \nassoisated with a node to which this sensor is attached.\nAs from version 1.1.0. it uses waylay nmp package (sandbox 0.14.0)\n\nAs from version 1.3.x this sensor also merges the streamData if it is configured to execute on data.\n\nYou can specify from (epoch time in milliseconds) and to (it can be omitted, then it will take the current time).\nIf from is omitted it will query data for the past hour.\n\nFrom and to field can also provide duration (such as P1M, P1D etc), based on ISO_8601 \n\nYou can get data on which already grouping and/or aggregation is computed. \nFor more info, please check documentaion\nAggregation:\n<ul>\n<li>mean</li> \n<li>medium</li>  \n<li>min</li> \n<li>max</li> \n<li>sum</li> \n</ul>\nGrouped by: \n<ul>\n<li>none (just skip in the query)</li>\n<li>auto</li>\n<li>second</li>\n<li>minute</li>\n<li>hour</li>\n<li>day</li>\n<li>week</li>\n</ul>\n\n",
    "iconURL": "https://static.waylay.io/plugs/icons/timeseries.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "metric",
      "from",
      "to",
      "aggregate",
      "grouping"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "series",
        "dataType": "object"
      },
      {
        "parameter": "query",
        "dataType": "double"
      },
      {
        "parameter": "latest",
        "dataType": "double"
      }
    ]
  }
}
