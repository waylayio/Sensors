{"name":"executeQuery","version":"1.1.9","type":"sensor","script":"const moment = require('moment')\n\nfunction parseISOStringDataInput (input) {\n  const duration = moment.duration(input)\n  return moment().subtract(duration).unix() * 1000\n}\n\nfunction parseTimestamp (timestamp) {\n  if (!isNaN(timestamp)) { return timestamp }\n  if (timestamp && timestamp !== '' && isNaN(timestamp)) { return parseISOStringDataInput(timestamp) }\n}\n\nfunction createQueryOptions (window, from, until, columnwise) {\n  const queryOptions = {}\n\n  if (window) queryOptions.window = window\n  if (from) queryOptions.from = from\n  if (until) queryOptions.until = until\n  queryOptions['render.mode'] = columnwise ? 'RENDER_MODE_SERIES' : 'RENDER_MODE_COMPACT_WS'\n\n  return queryOptions\n}\n\nfunction hasData (response) {\n  return response && response.data && response.data[0].columns && response.data[0].columns.length > 1\n}\n\nfunction notEmpty (param) {\n  return param !== undefined && param !== null && param !== ''\n}\n\nfunction processResponse (response, removeTimestamp, columnwise) {\n  const result = response.data[0]\n\n  if (removeTimestamp) {\n    result.columns.shift()\n\n    if (columnwise) { result.data.shift() } else { result.data = result.data.map(row => { row.shift(); return row }) }\n  }\n\n  if (columnwise) {\n    const nestedData = []\n    nestedData.push(result.data)\n    result.data = nestedData\n  }\n\n  return result\n}\n\nasync function execute () {\n  const queryName = options.requiredProperties.queryName\n  const window = options.requiredProperties.window\n  let from = options.requiredProperties.from\n  let until = options.requiredProperties.until\n  const removeTimestamp = options.requiredProperties.removeTimestamp === 'true'\n  const columnwise = options.requiredProperties.columnwise === 'true'\n\n  from = parseTimestamp(from)\n  until = parseTimestamp(until)\n\n  if (!queryName || queryName === '') { return send(new Error('No valid queryName supplied.'), { observedState: 'Not Collected' }) }\n  if (notEmpty(window) && notEmpty(from) && notEmpty(until)) { return send(new Error('Only specify 2 out of the window, from and until properties.'), { observedState: 'Not Collected' }) }\n\n  const queryOptions = createQueryOptions(window, from, until, columnwise)\n\n  const response = await waylay.analytics.getQueryData(queryName, queryOptions)\n    .catch(err => {\n      send(err, { observedState: 'Not Collected' })\n    })\n\n  const result = hasData(response) && processResponse(response, removeTimestamp, columnwise)\n\n  send(null, {\n    observedState: result ? 'Collected' : 'Not Collected',\n    rawData: result || response\n  })\n}\n\nexecute()","metadata":{"author":"Sander Vanhove","category":"Data","description":"Get the data as specified by a certain data query.\n\nYou can specify a `window`, `from` and `until` to control the time frame that is fetched.\nWhen doing so, keep in mind that you are able to specify only 2 out of these three,\nelse they will overwrite each other, resulting in unexpected behavior.\n\nThe `removeTimestamp` property will remove the timestamp from the data and columns when it's value is 'true'.\n\nThe `columnwise` property will make the data return columnwise when set to 'true'. By default the data will be returned rowwise.\n\n# Properties:\n- `queryName`: name of the query to execute.\n- `window`: the window of data to get, optional.\n- `from`: the timestamp from which to start getting data, optional.\n- `until`: the timestamp up until to get data, optional.\n- `removeTimestamps`: whether timestamps should be removed, optional.\n- `columnwise`: whether the data should be returned columnwise, optional.\n\n# States:\n- `Collected`: The results are collected and available.\n- `Not Collected`: Something went wrong and the results are not available.","iconURL":"https://static.waylay.io/icons/query_designer.png","supportedStates":["Collected","Not Collected"],"requiredProperties":["queryName","window","from","until","removeTimestamp","columnwise"],"requiredRawData":[],"rawData":[{"parameter":"data","dataType":"object[]"},{"parameter":"columns","dataType":"object[]"}]},"dependencies":{"moment":"2.29.1"}}