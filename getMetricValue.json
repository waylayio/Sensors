{
  "name": "getMetricValue",
  "version": "2.0.3",
  "type": "sensor",
  "script": "const moment = require('moment')\nconst { resource, metric, duration } = options.requiredProperties\n\nfunction parseDuration (input) {\n  const duration = moment.duration(input)\n  return moment().subtract(duration).unix() * 1000\n}\n\nfunction createQueryParams (options) {\n  let {\n    duration,\n    aggregate\n  } = options.requiredProperties\n\n  const queryParams = {}\n\n  queryParams.from = parseDuration(duration)\n\n  if (aggregate === null || aggregate === '') {\n    aggregate = 'mean'\n  }\n  queryParams.aggregate = aggregate\n\n  queryParams.grouping = duration\n  \n\n  return queryParams\n}\n\nasync function execute () {\n  if (!resource) {\n    return send(new Error('Resource not defined'))\n  }\n  if (!metric) {\n    return send(new Error('Please specify metric'))\n  }\n\n  if(!duration){\n    return send(new Error('Please specify duration'))\n  }\n\n  const queryParams = createQueryParams(options)\n  console.log(queryParams)\n  console.log('qs', queryParams)\n\n  const response = await waylay.data.getMetricSeries(resource, metric, queryParams)\n    .catch(error => {\n      console.error(error)\n      send(new Error('Error getting data: ' + error))\n    })\n\n  const series = response.series\n  const state = series.length > 0 ? 'Collected' : 'Not Collected'\n  const result = series[0][1]\n\n  send(null, {\n    observedState: state,\n    rawData: {\n      result : result\n    }\n  })\n}\n\nexecute().catch(send)",
  "metadata": {
    "author": "",
    "description": "<h4>getMetricValue Sensor</h4>\n<br>\nGives back a single value of one metric.\nResource should be provided from the one assoisated with this sensor.\n<br><br>\n<b>States</b>\n<br>\n<ul>\n    <li>\n        Collected: Data was found\n    </li>\n    <li>\n        Not Collected: Data was not found\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>\n        result: result value from query\n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li>\n        resource: the resource you want to get a metric from\n    </li>\n    <li>\n        metric: name of the metric to query\n    </li>\n    <li>\n        from (optional): epoch time in milliseconds or <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO_8601 duration </a> (when left empty, will query data for the past hour)\n    </li>\n    <li>\n        to (optional): epoch time in milliseconds (when left empty it will take the current time).\n    </li>\n    <li>\n        aggregate:\n        <ul>\n            <li>mean</li> \n            <li>medium</li>  \n            <li>min</li> \n            <li>max</li> \n            <li>sum</li> \n        </ul>\n    </li>\n    <li>\n        grouping:\n        <ul>\n            <li>none (just skip in the query)</li>\n            <li>auto</li>\n            <li>second</li>\n            <li>minute</li>\n            <li>hour</li>\n            <li>day</li>\n            <li>week</li>\n        </ul>\n    </li>\n</ul>\n",
    "iconURL": "https://static.waylay.io/plugs/icons/timeseries.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "resource",
      "metric",
      "duration",
      "aggregate"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "result",
        "dataType": "float"
      }
    ]
  },
  "dependencies": {
    "moment": "^2.29.1"
  }
}