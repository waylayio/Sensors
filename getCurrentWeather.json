{
  "name": "getCurrentWeather",
  "version": "1.0.10",
  "type": "sensor",
  "script": "const axios = require('axios')\n\nconst API_KEY = options.requiredProperties.OPENWEATHER_KEY\nconst city = options.requiredProperties.city\n\nif (!API_KEY || !city) {\n  send(new Error('Required properties missing'))\n} else {\n  const url = 'http://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=metric' + '&appid=' + API_KEY\n\n  axios.get(url)\n    .then(response => {\n      const { data } = response\n      if (data.cod && data.cod !== '200' && data.message) {\n        throw new Error(data.message)\n      }\n      const state = data.weather[0].main\n      const value = {\n        observedState: 'Collected',\n        rawData: {\n          temperature: data.main.temp,\n          temp_feel: data.main.feels_like,\n          pressure: data.main.pressure,\n          humidity: data.main.humidity,\n          temp_min: data.main.temp_min,\n          temp_max: data.main.temp_max,\n          wind_speed: data.wind.speed,\n          wind_direction: data.wind.deg,\n          clouds_coverage: data.clouds.all,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          longitude: data.coord.lon,\n          latitude: data.coord.lat,\n          name: data.name,\n          condition: state,\n          icon: 'http://openweathermap.org/img/w/' + data.weather[0].icon + '.png'\n        }\n      }\n      send(null, value)\n    })\n    .catch(err => {\n      send(null, {\n        observedState: 'Not Collected',\n        rawData : { error: err }\n      })\n    })\n}\n",
  "metadata": {
    "author": "",
    "description": "<h4>getCurrentWeather Sensor</h4>\n<br>\nWeather sensor based on the API provided by <a target=\"_blank\" href=\"http://openweathermap.org/\">Open weather</a><br>\n<br><br>\n<b>States</b>\n<br>\n<ul>\n    <li>\n        Collected\n    </li>\n    <li>\n        Not Collected\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>\n        temperature\n    </li>\n    <li>\n        temp_feel: This temperature parameter accounts for the human perception of weather.\n    </li>\n    <li>\n        pressure: Atmospheric pressure in hPa\n    </li>\n    <li>\n        humidity: Humidity in %\n    </li>\n    <li>\n        temp_min: Minimum temperature at the moment. This is minimal currently observed temperature \n    </li>\n    <li>\n        temp_max: Maximum temperature at the moment. This is maximal currently observed temperature.\n    </li>\n    <li>\n        wind_speed: Wind speed in meter/sec\n    </li>\n    <li>\n        wind_direction: Wind direction in degrees \n    </li>\n    <li>\n        wind_gust_speed: Wind gust speed in meter/sec\n    </li>\n    <li>\n        clouds_coverage: Cloudiness, %\n    </li>\n    <li>\n        sunrise: Sunrise time, unix, UTC\n    </li>\n    <li>\n        sunset: Sunset time, unix, UTC\n    </li>\n    <li>\n        rain_last_hour: Rain volume for the last hour in mm\n    </li>\n    <li>\n        snow_last_hour: Snow volume for the last hour in mm\n    </li>\n    <li>\n        longitude: City geo location, longitude\n    </li>\n    <li>\n        latitude: City geo location, latitude\n    </li>\n    <li>\n        name: City name\n    </li>\n    <li>\n        condition: Group of weather parameters (Rain, Snow, Extreme etc.)\n    </li>\n    <li>\n        icon: Weather icon url\n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li>\n        city: Name of the city (be aware that there are many cities in US that have the same name as the one in Europe, so it is always better to also specify the country, example: Paris, France)\n    </li>\n    <li>\n        OPENWEATHER_KEY: OpenWeather api key (we do not recommend to fill in the api key as plaintext use, <a href=\"https://docs.waylay.io/plugins/sensors-and-actuators/#properties-declarative-binding\" target=\"_blank\">declerative binding</a> in combination with <a href=\"https://docs.waylay.io/features/rules/vault/\" target=\"_blank\">vault</a>)\n    </li>\n</ul>",
    "iconURL": "https://static.waylay.io/plugs/icons/weather.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "city",
      "OPENWEATHER_KEY"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "temperature",
        "dataType": "double"
      },
      {
        "parameter": "pressure",
        "dataType": "double"
      },
      {
        "parameter": "humidity",
        "dataType": "double"
      },
      {
        "parameter": "wind_speed",
        "dataType": "double"
      },
      {
        "parameter": "longitude",
        "dataType": "double"
      },
      {
        "parameter": "latitude",
        "dataType": "double"
      },
      {
        "parameter": "clouds_coverage",
        "dataType": "double"
      },
      {
        "parameter": "sunrise",
        "dataType": "double"
      },
      {
        "parameter": "sunset",
        "dataType": "double"
      },
      {
        "parameter": "name",
        "dataType": "string"
      },
      {
        "parameter": "condition",
        "dataType": "string"
      },
      {
        "parameter": "icon",
        "dataType": "string"
      },
      {
        "parameter": "temp_min",
        "dataType": "double"
      },
      {
        "parameter": "temp_max",
        "dataType": "double"
      },
      {
        "parameter": "temp_feel",
        "dataType": "double"
      },
      {
        "parameter": "wind_direction",
        "dataType": "double"
      }
    ]
  },
  "dependencies": {
    "axios": "^0.20.0"
  }
}