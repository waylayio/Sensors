{
  "name": "composite",
  "version": "1.0.1",
  "type": "sensor",
  "script": "const { propertyList, sensor } = options.requiredProperties\n\nasync function execute () {\n  if (!propertyList || !sensor) {\n    return send(new Error('Missing property'))\n  }\n\n  let parsedProperties\n  try {\n    parsedProperties = typeof propertyList === 'string' ? JSON.parse(propertyList) : propertyList\n  } catch (error) {\n    return send(error)\n  }\n  try {\n    const results = parsedProperties.map((properties) => {\n      return waylay.sensors.execute(sensor, 'latest', { properties })\n    })\n    const response = await Promise.all(results)\n\n    send(null, { observedState: 'Success', rawData: { response } })\n  } catch (error) {\n    console.error(error)\n    send(null, {\n      observedState: 'Error',\n      rawData: { errorMessage: 'An error occured while executing sensor: ' + error }\n    })\n  }\n}\n\nexecute()",
  "metadata": {
    "author": "",
    "category": "",
    "description": "Composite sensor, it will send as many actions as there are objects in the propertyList.",
    "documentationURL": "https://docs.waylay.io/plugins/composite/",
    "iconURL": "https://static.waylay.io/plugs/icons/box_out.png",
    "supportedStates": [
      "Success",
      "Error"
    ],
    "requiredProperties": [
      "sensor",
      "propertyList"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "errorMessage",
        "dataType": "string"
      },
      {
        "parameter": "response",
        "dataType": "object"
      }
    ],
    "configuration": [
      {
        "name": "sensor",
        "type": "string",
        "mandatory": true,
        "defaultValue": ""
      },
      {
        "name": "propertyList",
        "type": "string",
        "mandatory": true,
        "defaultValue": ""
      }
    ]
  }
}