{
  "name": "objectInsideGeofence",
  "version": "2.0.2",
  "type": "sensor",
  "script": "/*****************************************************************************\n EXAMPLE INPUT\n\n const geofences = [\n {\n        \"id\": \"Antwerp\",\n        \"type\": \"circle\",\n        \"radius\": 10000,\n        \"coordinates\": { \"latitude\": 51.21989, \"longitude\": 4.4025 }\n    },\n {\n        \"id\": \"Ghent\",\n        \"type\": \"polygon\",\n        \"coordinates\": [\n            { \"latitude\": 51.089091, \"longitude\": 3.606198 },\n            { \"latitude\": 51.110157, \"longitude\": 3.869108 },\n            { \"latitude\": 50.995344, \"longitude\": 3.878717 },\n            { \"latitude\": 50.995685, \"longitude\": 3.628888 }\n        ]\n    }\n\n ]\n\n const coordinates = {\n    \"latitude\": 51.2194,\n    \"longitude\": 4.4025\n}\n****************************************************************************/\nconst geolib = require('geolib')\n\nasync function execute () {\n  const { coordinates, geofences } = options.requiredProperties\n  let parsedCoordinates, parsedGeofences\n  try {\n    parsedCoordinates = typeof coordinates === 'string' ? JSON.parse(coordinates) : coordinates\n    parsedGeofences = typeof geofences === 'string' ? JSON.parse(geofences) : geofences\n  } catch (error) {\n    throw new Error('Provided properties can\\'t be parsed', error)\n  }\n\n  const results = parsedGeofences.map(geofence => checkGeofence(geofence, parsedCoordinates))\n\n  send(null, {\n    observedState: results.some(result => result.inside) ? 'IN' : 'OUT',\n    rawData: {\n      device: { parsedCoordinates },\n      results: results\n    }\n  })\n}\n\nfunction checkGeofence (geofence, coordinates) {\n  let inside = null\n\n  if (geofence.type === 'circle') {\n    inside = geolib.isPointWithinRadius(coordinates, geofence.coordinates, geofence.radius)\n  } else if (geofence.type === 'polygon') {\n    inside = geolib.isPointInPolygon(coordinates, geofence.coordinates)\n  } else {\n    throw new Error('Wrong geofence provided')\n  }\n\n  return {\n    geofence,\n    inside\n  }\n}\n\nexecute().catch(send)\n",
  "metadata": {
    "author": "",
    "description": "Check if a coordinates are inside of a geofenced area.",
    "documentationURL": "https://docs.waylay.io/plugins/objectinsidegeofence/",
    "iconURL": "https://static.waylay.io/icons/geoFence.png",
    "supportedStates": [
      "IN",
      "OUT"
    ],
    "requiredProperties": [
      "geofences",
      "coordinates"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "device",
        "dataType": "object"
      },
      {
        "parameter": "results",
        "dataType": "object"
      }
    ],
    "configuration": [
      {
        "name": "geofences",
        "type": "string",
        "mandatory": true,
        "defaultValue": "[]"
      },
      {
        "name": "coordinates",
        "type": "string",
        "mandatory": true,
        "defaultValue": "[]"
      }
    ]
  },
  "dependencies": {
    "geolib": "^3.3.1"
  }
}