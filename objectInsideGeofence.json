{"name":"objectInsideGeofence","version":"1.0.0","type":"sensor","script":"/* \nEXAMPLE ARRAY OF GEOFENCES\n    [\n        { \"id\":\"Antwerp\", \"type\": \"circle\", \"coordinates\": [51.2194, 4.4025], \"radius\": 10000 },\n        { \"id\":\"Ghent\", \"type\": \"polygon\", \"coordinates\": [ [51.089091, 3.606198], [51.110157, 3.869108], [50.995344, 3.878717], [50.995685, 3.628888] ] }\n    ]\n    \nEXAMPLE COORDINATES: [51.2194, 4.4025]\n*/\n\nasync function main () {\n    const coordinates = waylayUtil.getProperty(options, 'coordinates')\n    const geofences = waylayUtil.getProperty(options, 'geofences')\n    \n    if (_.isEmpty(coordinates)) {\n        throw new Error('No coordinates provided')\n    }\n    \n    if (!_.isArray(geofences)) {\n        throw new Error('No geofences provided')\n    }\n    \n    const [latitude, longitude] = coordinates\n    \n    const results = geofences.map(geofence => checkGeofence(geofence, latitude, longitude))\n\n    send(null, {\n        observedState: results.some(result => result.inside) ? 'IN' : 'OUT',\n        rawData: { \n            device: { coordinates },\n            results: results\n        }\n    })\n}\n\nfunction checkGeofence (geofence, latitude, longitude) {\n    const inside = geofence.type === 'circle'\n        ? isInsideCircle(geofence, latitude, longitude)\n        : isInsidePolygon(geofence, latitude, longitude)\n\n    return { inside, geofence }\n}\n\nfunction isInsideCircle (circle, latitude, longitude) {\n    const circleLat = circle.coordinates[0]\n    const circleLon = circle.coordinates[1]\n    const radius = circle.radius\n    \n    if(!circleLat || !circleLon || !radius) {\n        send(new Error('Required props for a circle are coordinates[0], coordinates[1], radius'))\n    }\n    \n    let distance = waylayUtil.getDistance(latitude, longitude, circleLat, circleLon)\n    distance = parseFloat(distance) * 1000 //meters\n    return distance <= radius\n}\n\nfunction isInsidePolygon (polygon, latitude, longitude) {\n    const poly = _.map(polygon.coordinates, function(p) {\n        return { lat: p[0], long: p[1] }\n    })\n    \n    let i, j\n    let inside = false\n    for (i = 0, j = poly.length - 1; i < poly.length; j = i++) {\n        if(((poly[i].long > longitude) != (poly[j].long > longitude)) && (latitude < (poly[j].lat-poly[i].lat) * (longitude-poly[i].long) / (poly[j].long-poly[i].long) + poly[i].lat)) {\n            inside = !inside\n        }\n    }\n    return inside\n}\n\nmain().catch(send)\n","metadata":{"author":"Waylay","category":"Location","description":"State is IN if the provided coordinates are iside any of the provided geofences.\n\nRequired properties: \n\n<ul>\n<li> list of geofences:e.g.\n<pre>\n[\n    { \"id\":\"Antwerp\", \"type\": \"circle\", \"coordinates\": [51.2194, 4.4025], \"radius\": 10000 },\n    { \"id\":\"Ghent\", \"type\": \"polygon\", \"coordinates\": [ [51.089091, 3.606198], [51.110157, 3.869108], [50.995344, 3.878717], [50.995685, 3.628888] ] }\n]\n</pre>\n\n</li>\n<li> coordinates: e.g.\n\n<pre>\n[51.2194, 4.4025]\n</pre>\n</li>","iconURL":"https://static.waylay.io/icons/geoFence.png","supportedStates":["IN","OUT"],"requiredProperties":["geofences","coordinates"],"requiredRawData":[],"rawData":[]}}