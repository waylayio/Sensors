{
  "name": "objectInsideGeofence",
  "version": "1.0.10",
  "type": "sensor",
  "script": "/*****************************************************************************\n EXAMPLE INPUT\n\n const geofences = [\n {\n        \"id\": \"Antwerp\",\n        \"type\": \"circle\",\n        \"radius\": 10000,\n        \"coordinates\": { \"latitude\": 51.21989, \"longitude\": 4.4025 }\n    },\n {\n        \"id\": \"Ghent\",\n        \"type\": \"polygon\",\n        \"coordinates\": [\n            { \"latitude\": 51.089091, \"longitude\": 3.606198 },\n            { \"latitude\": 51.110157, \"longitude\": 3.869108 },\n            { \"latitude\": 50.995344, \"longitude\": 3.878717 },\n            { \"latitude\": 50.995685, \"longitude\": 3.628888 }\n        ]\n    }\n\n ]\n\n const coordinates = {\n    \"latitude\": 51.2194,\n    \"longitude\": 4.4025\n}\n****************************************************************************/\nconst geolib = require('geolib')\n\nasync function main () {\n  let coordinates, geofences\n\n  try {\n    coordinates = JSON.parse(options.requiredProperties.coordinates)\n    geofences = JSON.parse(options.requiredProperties.geofences)\n  } catch (error) {\n    throw new Error('Provided properties can\\'t be parsed', error)\n  }\n\n  const results = geofences.map(geofence => checkGeofence(geofence, coordinates))\n\n  send(null, {\n    observedState: results.some(result => result.inside) ? 'IN' : 'OUT',\n    rawData: {\n      device: { coordinates },\n      results: results\n    }\n  })\n}\n\nfunction checkGeofence (geofence, coordinates) {\n  let inside = null\n\n  if (geofence.type === 'circle') {\n    inside = geolib.isPointWithinRadius(coordinates, geofence.coordinates, geofence.radius)\n  } else if (geofence.type === 'polygon') {\n    inside = geolib.isPointInPolygon(coordinates, geofence.coordinates)\n  } else {\n    throw new Error('Wrong geofence provided')\n  }\n\n  return {\n    geofence,\n    inside\n  }\n}\n\nmain().catch(send)\n",
  "metadata": {
    "author": "",
    "iconURL": "https://static.waylay.io/icons/geoFence.png",
    "description": "<h4>objectInsideGeofence Sensor</h4>\n<br>\nCheck if a coordinates are inside of a geofenced area.\n<br><br>\n<b>States</b>\nState is IN if the provided coordinates are iside any of the provided geofences.\n<ul>\n    <li>\n        IN\n    </li>\n    <li>\n        OUT\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>\n        device: coordinates of the device\n    </li>\n    <li>\n        result: IN or OUT for each coordinate pair\n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li> \n        geofences: list of geofences:e.g.\n        <pre>\n        [\n            {\n                \"id\": \"Antwerp\",\n                \"type\": \"circle\",\n                \"radius\": 10000,\n                \"coordinates\": { \"latitude\": 51.21989, \"longitude\": 4.4025 }\n            },\n            {\n                \"id\": \"Ghent\",\n                \"type\": \"polygon\",\n                \"coordinates\": [\n                    { \"latitude\": 51.089091, \"longitude\": 3.606198 },\n                    { \"latitude\": 51.110157, \"longitude\": 3.869108 }, \n                    { \"latitude\": 50.995344, \"longitude\": 3.878717 },\n                    { \"latitude\": 50.995685, \"longitude\": 3.628888 }\n                ]\n            }\n            \n        ]\n        </pre>\n    </li>\n    <li> \n        coordinates: e.g.\n        <pre>\n        {\n            \"latitude\": 51.2194,\n            \"longitude\": 4.4025\n        }\n        </pre>\n    </li>\n</ul>",
    "rawData": [
      {
        "dataType": "object",
        "parameter": "device"
      },
      {
        "dataType": "object",
        "parameter": "results"
      }
    ],
    "requiredProperties": [
      "geofences",
      "coordinates"
    ],
    "supportedStates": [
      "IN",
      "OUT"
    ]
  },
  "dependencies": {
    "geolib": "3.3.1"
  }
}