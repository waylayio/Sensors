{
  "name": "byomlPredict",
  "version": "1.0.0",
  "type": "sensor",
  "script": "const { modelName, instances, useProbabilities } = options.requiredProperties\n\nconst probability = ['true', true].includes(useProbabilities)\n\nasync function execute () {\n  if (!modelName) { return send(new Error('Missing property: modelName')) }\n  if (!instances) { return send(new Error('Missing property: instances')) }\n\n  let payload\n  try {\n    payload = typeof instances === 'string' ? JSON.parse(instances) : instances\n  } catch (error) {\n    return send(error)\n  }\n\n  const data = { instances: payload, probability }\n  try {\n    const body = await waylay.byoml.predict(modelName, data)\n    send(null, { observedState: 'Predicted', rawData: body })\n  } catch (error) {\n    console.error(error.response ? error.response.data : error)\n    send(new Error('Failed to predict, check if model exists and if instances are in correct format.'))\n  }\n}\n\nexecute()",
  "metadata": {
    "author": "",
    "category": "",
    "description": "<h4>byomlPredict Sensor</h4>\nBYOML endpoint invoker.\n<br>\nUsed to invoke an uploaded ML model.\n<br><br>\n<b>States</b>\n<ul>\n    <li>\n        Not predicted: Indicates that something went wrong.\n    </li>\n    <li>\n        predicted: Indicates that the predictions are succesfully retrieved and the results are ready to use.\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\n<ul>\n    <li>\n        predictions: This will contain the result returned by the specified model.\n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li>\n        instances: The model inputs.\n    </li>\n    <li>\n        modelName: The model that should be used.\n    </li>\n    <li>\n        useProbabilities: Wether probabilities should be returned, this will only work for a subset of scikit-learn models.\n    </li>\n</ul>\n",
    "documentationURL": "https://docs.waylay.io/plugins/byomlpredict/",
    "iconURL": "https://static.waylay.io/plugs/icons/ML-prediction.png",
    "supportedStates": [
      "Predicted",
      "Not Predicted"
    ],
    "requiredProperties": [
      "modelName",
      "instances",
      "useProbabilities"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "predictions",
        "dataType": "object"
      }
    ]
  }
}