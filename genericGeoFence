{
  "name": "genericGeoFence",
  "version": "1.0.9",
  "type": "sensor",
  "script": "/*\nvar options = __.extend(options, {\n    rawData : {\n    \"GLOBAL\":{\n            \"latitude\":\"39\",\n            \"longitude\":\"3.71\"\n        }\n    }\n});\n*/\n\n\nvar latitude, longitude\nvar oldLocation = waylayUtil.getCacheData(options, \"location\")\n\ntry{\n    latitude = waylayUtil.getStreamData(options, \"latitude\")\n    longitude = waylayUtil.getStreamData(options, \"longitude\")  \n} catch(err){\n    send(new Error(err));\n}\nif(!latitude || !longitude){\n    send(new Error(\"runtime location not available\"))\n}\n\nvar locations\n\ntry{\n    locations = waylayUtil.getRawData(options, options.requiredProperties.locations)\n    if(!_.isObject(locations))\n        locations = JSON.parse(locations)\n} catch(err){\n    console.log(\"err\", err)\n    locations = JSON.parse(options.requiredProperties.locations);\n}\nconsole.log(\"locations\", locations)\n\n\nvar distance\n\nvar isInsideCircle = function(lat, long, radius){\n    console.log(\"isInsideCircle:\", \"lat=\"+ lat + \", long=\"+long + \", radius=\"+radius)\n    console.log(\"isInsideCircle:\", \"latitude=\"+ latitude + \", longitude=\"+longitude)\n    distance = waylayUtil.getDistance(latitude, longitude, lat, long)\n    console.log(\"isInsideCircle:\", \"distance[km]=\"+ distance)\n    distance = parseFloat(distance) * 1000 //meters\n    console.log(\"isInsideCircle: distance[m]=\", distance)\n    return distance <= radius\n};\n\nvar isInsidePolygon = function(poly, pointx, pointy) {\n    console.log(\"isInsidePolygon:\", poly)\n    var i, j;\n    var inside = false;\n    for (i = 0, j = poly.length - 1; i < poly.length; j = i++) {\n        if(((poly[i].long > pointy) != (poly[j].long > pointy)) && (pointx < (poly[j].lat-poly[i].lat) * (pointy-poly[i].long) / (poly[j].long-poly[i].long) + poly[i].lat) ) inside = !inside;\n    }\n    console.log(\"isInsidePolygon:\",  inside)\n    return inside;\n}\n\nvar retValue =  {\n    observedState:  \"OUT\",\n    rawData: {  latitude,  longitude }\n};\n\nvar inside\n_.each(locations, function(location){\n    if(location.coordinates.length === 1){\n        if(location.radius === undefined ){\n            send(new Error(\"radius not defined\"))\n        }\n        inside = isInsideCircle(location.coordinates[0].lat, location.coordinates[0].long, location.radius)\n        if(inside){\n            retValue.observedState = \"IN\"\n            retValue.rawData.location = location\n            retValue.rawData.distance = distance\n            return false;\n        }\n    } else {\n        if(location.coordinates.length === 2) {\n            //need one in the middle, and one to be the last \n            var tmp = location.coordinates.pop()\n            location.coordinates.push({lat: tmp.lat, long: location.coordinates[0].long}, tmp,\n            {lat: location.coordinates[0].lat, long: tmp.long})\n        }\n        inside = isInsidePolygon(location.coordinates, latitude, longitude)\n        if(inside){\n            retValue.observedState = \"IN\"\n            retValue.rawData.location = location\n            return false;\n        }\n    }\n    \n});\n\nif(retValue.observedState === \"OUT\" && oldLocation !== undefined)\n    retValue.rawData.oldLocation = oldLocation\n\nsend(null, retValue)\n\n",
  "metadata": {
    "author": "Veselin Pizurica",
    "category": "Location",
    "description": "genericGeoFence calculator based on the runtime location.\n\nInput data:\n<pre>\n[{\n    id: name,\n    coordinates : [{ lat: 51.04, long:3.7}](circle), polygon [{ lat: 51.04, long:3.7},{ lat: 52.04, long:3.7}] or polygon with multiple locations\n    radius: in metres, in case of circle\n}]\n</pre>\n\nfor radius \n<pre>\n[ { \"id\":\"Depo1\", \"radius\": 10000,    \"coordinates\": [{\"lat\" : 51.07, \"long\" : 3.51} ]  }  ]\n</pre>\nfor polygon\n<pre>\n[ {  \"id\":\"Depo1\", \"coordinates\": [{\"lat\" : 50.07, \"long\" : 3}, {\"lat\" : 50.07, \"long\" : 4}, {\"lat\" : 52.07, \"long\" : 3.5}] }]\nor\n[ {  \"id\": \"Depo1\", \"coordinates\": [{\"lat\": 51.07,\"long\": 3.51},{\"lat\": 52.07,\"long\": 4.51 }] } ]\n</pre>\n\nRaw data:\n<ul>\n<li>latitude</li>\n<li>longitude</li>\n<li>location</li>\n<li>oldLocation, if it is out, provides the previous geofence location (only once)</li>\n<li>distance (if circle)</li>\n</ul>\n",
    "iconURL": "https://static.waylay.io/plugs/icons/geoFence.png",
    "supportedStates": [
      "IN",
      "OUT"
    ],
    "requiredProperties": [
      "locations"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "distance",
        "dataType": "double"
      },
      {
        "parameter": "latitude",
        "dataType": "double"
      },
      {
        "parameter": "location",
        "dataType": "object"
      },
      {
        "parameter": "longitude",
        "dataType": "double"
      },
      {
        "parameter": "oldLocation",
        "dataType": "double"
      }
    ]
  }
}
