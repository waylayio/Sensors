{"name":"hasAnomaly","version":"1.6.9","type":"sensor","script":"function execute () {\n  waylay.analytics.baseUrl = options.globalSettings.waylay_analytics || 'https://ts-analytics.waylay.io'\n\n  const resource = options.node.RESOURCE\n\n  const {\n    tsaConfig\n  } = options.requiredProperties\n\n  let {\n    consecutive,\n    params,\n    window\n  } = options.requiredProperties\n\n  consecutive = Number(consecutive)\n  params = params || {}\n  window = window || 3600\n\n  if (!resource || !tsaConfig) return send(new Error('Please provide resource and tsaConfig'))\n\n  if (typeof params === 'string') {\n    try {\n      params = JSON.parse(params)\n    } catch (err) {\n      return send(new Error('Could not parse params as JSON'))\n    }\n  }\n\n  params.anomaly = params.anomaly || {}\n  if (window) {\n    if (typeof window === 'string' && window.indexOf('P') > -1) {\n      // iso period string like 'PT1H'\n      params.anomaly.window = window\n    } else if (!isNaN(window)) {\n      params.anomaly.window = `PT${parseInt(window)}S`\n    }\n    // force the observation window to end now\n    params.until = params.until || 'now'\n  }\n\n  // update  'anomaly.consecutive' in the api call to filter out the anomalies in the sliding window\n  if (consecutive) params.anomaly.consecutive = parseInt(consecutive)\n\n  waylay.analytics.anomaly(resource, tsaConfig, params, true, { api_version: '0.14.0' })\n    .then(result => sendResult(result, send))\n    .catch(err => sendError(err, send))\n}\n\nfunction sendResult (result, send) {\n  send(null, {\n    observedState: result.anomaly ? 'Anomaly' : 'No Anomaly',\n    rawData: {\n      anomaly_window: result.options.anomaly.window,\n      anomalies: result.anomalies,\n      last_observation: result.last_observation,\n      last_anomaly: result.last_anomaly\n    }\n  })\n}\n\nfunction sendError (err, send) {\n  if (err.response) {\n    console.error(err.response.data)\n    send(new Error(JSON.stringify({\n      method: err.response.request.method,\n      path: err.response.request.path,\n      status: err.response.status,\n      message: err.response.data.error\n    })))\n  } else {\n    console.error(err)\n    send(err)\n  }\n}\n\nexecute()","metadata":{"author":"Thomas","category":"Analytics","description":"searches for anomalies back in time (sliding window).\n<p>\n<h5>Properties</h5>\n<ul>\n<li><code>tsaConfig</code> name of the TSA configuration</li>\n<li><code>window</code> number of seconds to look back for anomalies (default 3600). Alternatively you can use an <a href='https://en.wikipedia.org/wiki/ISO_8601#Durations'>iso8601 duration expression</a> such as 'PT2H' </li>\n<li><code>consecutive</code> number of consecutive anomalous observation that trigger an anomaly condition. If e.g. 3, then 3 observations in a row need to be anomalous before the <b>Anomaly</b> condition is triggered</li>\n<li><code>params</code> overrides for the analytics option configuration (see below)</li>\n</ul>\n\nThe to work on should be specified on the node. Use '$' if this resource should be the task resource.\n\n<h5>States</h5>\n<ul>\n<li><b>Anomaly</b> if there where at least <em>consecutive</em> anomalies in a row within the window</li>\n<li><b>No Anomaly</b> otherwise </li>\n</ul>\n<h5>Raw data returned</h5>\n<ul>\n<li><code>anomalies</code>list of all anomalies in the window (including those below the consecutive threshold)</li>\n<li><code>last_observation</code>last observation in the window (whether it is an anomaly or not)</li>\n<li><code>last_anomaly</code> last anomaly that satified the consecutive threshold </li>\n</ul>\n\n<strong>this functionality requires an active TS analytics license for your Waylay tenant</strong>\n\n<p>\nBefore using this sensor, configure the analytics options for \nthis metric using the  <a href=\"/#/analytics\">analytics dashboard</a>.\nAlternatively you can give option in the\n<code>params</code> section that will override any options stored.\nSee <a href='https://github.com/waylayio/TS_Analytics/blob/master/doc/apidoc.md'>apidoc</a>\non how to specify options.\n</p>\n\n\n","iconURL":"https://static.waylay.io/plugs/icons/anomaly.png","supportedStates":["Anomaly","No Anomaly"],"requiredProperties":["tsaConfig","window","consecutive","params"],"requiredRawData":[],"rawData":[{"parameter":"anomalies","dataType":"object[]"},{"parameter":"last_anomaly","dataType":"object"},{"parameter":"last_observation","dataType":"object"},{"parameter":"anomaly_window","dataType":"string"}]}}