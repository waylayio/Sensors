{"name":"anomalySensor","version":"1.6.2","type":"sensor","script":"waylay.analytics.baseUrl = options.globalSettings.waylay_analytics ||  'https://ts-analytics.waylay.io'\n\nvar resource = waylayUtil.getProperty(options, \"resource\") || waylayUtil.getResource(options)\n\n// backward compatibility: fall back to \"metric\" property\nvar metric = waylayUtil.getProperty(options, \"metric\")\n\nvar tsaConfig = waylayUtil.getProperty(options, \"tsaConfig\") || metric\n\nvar anomaly_window = waylayUtil.getProperty(options, \"window\") || 3600\nvar consecutive = waylayUtil.getProperty(options, \"consecutive\") \nvar params = waylayUtil.getProperty(options, \"params\") || {}\n\nif (typeof params === 'string') {\n    try {\n        params = JSON.parse(params)\n    } catch(err) {\n        console.log(err)\n    }\n} \n\nparams.anomaly = params.anomaly || {}\nif (anomaly_window) {\n     // override the  'anomaly.from' in the api to filter out the anomalies in the sliding window\n    if ( typeof anomaly_window === 'string' && anomaly_window.indexOf('P') > -1 ) {\n        // iso period string like 'PT1H'\n        params.anomaly.window = anomaly_window\n    } else if (anomaly_window) {\n        params.anomaly.window = 'PT' + parseInt(anomaly_window) + 'S'\n    } else {\n        // leave defaults set by configuration\n    }\n    // force the observation window to end now\n    params.until = params.until || 'now'\n}\n\nif (consecutive) {\n    // update  'anomaly.consecutive' in the api call to filter out the anomalies in the sliding window \n    params.anomaly.consecutive = parseInt(consecutive)\n}\n\nconst sendResult = function (result) {\n    send( null, {\n        observedState : result.anomaly ? 'Anomaly' : 'No Anomaly',\n        rawData : {\n            anomaly_window: result.options.anomaly.window,\n            anomalies: result.anomalies,\n            last_observation: result.last_observation,\n            last_anomaly: result.last_anomaly\n        }\n    }) \n}\n\nconst sendError = function (err) {\n    if (err.response) {\n        console.error(err.response.data)\n        send( new Error( JSON.stringify({ \n            method:err.response.request.method, \n            path:err.response.request.path, \n            status:err.response.status, \n            message:err.response.data.error \n        } ) ) )\n    } else {\n        console.error(err)\n        send(err)\n    }\n}\n\nif (resource && tsaConfig) {\n    waylay.analytics.anomaly(resource, tsaConfig, params).then(sendResult ,sendError )\n} else {\n    send(new Error('Please provide resource and tsaConfig'))\n}\n\n","metadata":{"author":"thomas","category":"TS Analytics","description":"searches for anomalies back in time (sliding window).\n<p>\n<h5>Properties</h5>\n<ul>\n<li><code>resource</code></li>\n<li><code>tsaConfig</code> name of the TSA configuration</li>\n<li><code>window</code> number of seconds to look back for anomalies (default 3600). Alternatively you can use an <a href='https://en.wikipedia.org/wiki/ISO_8601#Durations'>iso8601 duration expression</a> such as 'PT2H' </li>\n<li><code>consecutive</code> number of consecutive anomalous observation that trigger an anomaly condition. If e.g. 3, then 3 observations in a row need to be anomalous before the <b>Anomaly</b> condition is triggered</li>\n<li><code>params</code> overrides for the analytics option configuration (see below)</li>\n</ul>\n<h5>States</h5>\n<ul>\n<li><b>Anomaly</b> if there where at least <em>consecutive</em> anomalies in a row within the window</li>\n<li><b>No Anomaly</b> otherwise </li>\n</ul>\n<h5>Raw data returned</h5>\n<ul>\n<li><code>anomalies</code>list of all anomalies in the window (including those below the consecutive threshold)</li>\n<li><code>last_observation</code>last observation in the window (whether it is an anomaly or not)</li>\n<li><code>last_anomaly</code> last anomaly that satified the consecutive threshold </li>\n</ul>\n\n<strong>this functionality requires an active TS analytics license for your Waylay tenant</strong>\n\n<p>\nBefore using this sensor, configure the analytics options for \nthis metric using the  <a href=\"/#/analytics\">analytics dashboard</a>.\nAlternatively you can give option in the\n<code>params</code> section that will override any options stored.\nSee <a href='https://github.com/waylayio/TS_Analytics/blob/master/doc/apidoc.md'>apidoc</a>\non how to specify options.\n</p>\n\n\n","iconURL":"https://static.waylay.io/plugs/icons/anomaly.png","supportedStates":["Anomaly","No Anomaly"],"requiredProperties":["resource","tsaConfig","window","consecutive","params"],"requiredRawData":[],"rawData":[{"parameter":"anomalies","dataType":"object[]"},{"parameter":"last_anomaly","dataType":"object"},{"parameter":"last_observation","dataType":"object"}]}}