{
  "name": "getForecastWeather",
  "version": "1.1.0",
  "type": "sensor",
  "script": "const axios = require('axios')\n\nconst { OPENWEATHER_KEY: API_KEY, latitude: lat, longitude: lon } = options.requiredProperties\n\nasync function execute () {\n  if (!API_KEY || !lat || !lon) {\n    return send(new Error('Missing property'))\n  }\n\n  try {\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&exclude=current,minutely,daily,alerts`\n    const response = await axios.get(url)\n    const { data } = response\n    if (data.cod && data.cod !== '200' && data.message) {\n      throw new Error(data.message)\n    }\n    const forecastArray = data.hourly.map((forecast) => {\n      return {\n        time: forecast.dt,\n        temperature: forecast.temp,\n        temp_feel: forecast.feels_like,\n        pressure: forecast.pressure,\n        humidity: forecast.humidity,\n        wind_speed: forecast.wind_speed,\n        wind_direction: forecast.wind_deg,\n        clouds_coverage: forecast.clouds,\n        longitude: data.lon,\n        latitude: data.lat,\n        condition: forecast.weather[0].main,\n        icon: 'http://openweathermap.org/img/w/' + forecast.weather[0].icon + '.png'\n      }\n    })\n\n    send(null, {\n      observedState: 'Collected',\n      rawData: { forecastArray }\n    })\n  } catch (error) {\n    send(new Error('Could not fetch forecast weather: ' + error))\n  }\n}\n\nexecute()",
  "metadata": {
    "author": "",
    "category": "",
    "description": "<h4>getForecastWeather Sensor</h4>\n<br>\nWeather forecast sensor based on the API provided by <a target=\"_blank\" href=\"http://openweathermap.org/\">Open weather</a><br>\nReturns an array of the weather forecast for the comming 96 hours\n<br><br>\n<b>States</b>\n<br>\n<ul>\n    <li>\n        Collected\n    </li>\n    <li>\n        Not Collected\n    </li>\n</ul>\n<br>\n<b>Raw data</b>\nThe forecastArray conatins an array of objects with these values: \n<ul>\n    <li>\n        temperature\n    </li>\n    <li>\n        temp_feel: This temperature parameter accounts for the human perception of weather.\n    </li>\n    <li>\n        pressure: Atmospheric pressure in hPa\n    </li>\n    <li>\n        humidity: Humidity in %\n    </li>\n    <li>\n        wind_speed: Wind speed in meter/sec\n    </li>\n    <li>\n        wind_direction: Wind direction in degrees \n    </li>\n    <li>\n        clouds_coverage: Cloudiness, %\n    </li>\n    <li>\n        longitude: City geo location, longitude\n    </li>\n    <li>\n        latitude: City geo location, latitude\n    </li>\n    <li>\n        condition: Group of weather parameters (Rain, Snow, Extreme etc.)\n    </li>\n    <li>\n        icon: Weather icon url\n    </li>\n</ul>\n<br>\n<b>Properties</b>\n<ul>\n    <li>\n        OPENWEATHER_KEY: OpenWeather api key (we do not recommend to fill in the api key as plaintext use, <a href=\"https://docs.waylay.io/plugins/sensors-and-actuators/#properties-declarative-binding\" target=\"_blank\">declerative binding</a> in combination with <a href=\"https://docs.waylay.io/features/rules/vault/\" target=\"_blank\">vault</a>)\n    </li>\n     <li>\n        Latitude: Latitude of the location you want a forecast from\n    </li>\n     <li>\n        Longitude: Longitude of the location you want a forecast from\n    </li>\n</ul>",
    "documentationURL": "https://docs.waylay.io/plugins/getforecastweather/",
    "iconURL": "https://static.waylay.io/plugs/icons/weather.png",
    "supportedStates": [
      "Collected",
      "Not Collected"
    ],
    "requiredProperties": [
      "OPENWEATHER_KEY",
      "latitude",
      "longitude"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "forecastArray",
        "dataType": "object[]"
      }
    ]
  },
  "dependencies": {
    "axios": "^0.20.0"
  }
}