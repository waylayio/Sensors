{
  "name": "searchTweets",
  "version": "1.1.0",
  "type": "sensor",
  "script": "var OAuthConsumerKey = options.globalSettings.OAuthConsumerKey;\nvar OAuthConsumerSecret = options.globalSettings.OAuthConsumerSecret;\nvar OAuthAccessToken = options.globalSettings.OAuthAccessToken;\nvar OAuthAccessTokenSecret = options.globalSettings.OAuthAccessTokenSecret;\n\n\nvar client = new twitter({\n  consumer_key: OAuthConsumerKey,\n  consumer_secret: OAuthConsumerSecret,\n  access_token_key: OAuthAccessToken,\n  access_token_secret: OAuthAccessTokenSecret\n});\n\nvar searchTerms = options.requiredProperties.searchTerms;\nvar user = options.requiredProperties.user;\nvar query = {q: searchTerms, count:100};\nvar since_id, url;\nvar ignoreFirstSearch = false;\n\nvar searchTerms = options.requiredProperties.searchTerms || [];\nsearchTerms = searchTerms.split(\",\");\n\nfunction containsWord(text, word) {\n    word = word.toLowerCase();\n    text = text.toLowerCase();\n    return new RegExp('(?:[^.\\w]|^|^\\\\W+)' + word + '(?:[^.\\w]|\\\\W(?=\\\\W+|$)|$)').test(text);\n}\n\nif(user === undefined){\n    url = 'search/tweets';\n} else {\n    url = 'statuses/user_timeline.json';\n    query.screen_name = user;\n}\n\n/*\nThis problem is avoided by setting the since_id parameter to the greatest ID of all the Tweets \nyour application has already processed. Unlike max_id the since_id parameter is not inclusive, \nso it is not necessary to adjust the ID in any way. As shown in the following image, \nTwitter will only return Tweets with IDs higher than the value passed for since_id.\n*/\n \nsince_id = waylayUtil.getCacheData(options,\"since_id\");\nif(since_id){\n    query[\"since_id\"] = since_id;\n} else { // it is a first call, check if we should ignore first time search\n    if(options.requiredProperties.ignoreFirstSearch || options.requiredProperties.ignoreFirstSearch  == \"TRUE\" ||  \n            options.requiredProperties.ignoreFirstSearch ==\"true\" )\n        ignoreFirstSearch = true;\n}\n\nif(searchTerms.length > 0) {\n    try{\n        client.get(url, query, function(error, tweets, response){\n        //console.log(tweets);\n        if(user === undefined){\n            tweets = tweets.statuses;\n        }\n        //console.log(tweets);\n        var latestTweet = __.max(tweets, function(tweet){ return tweet.id; });\n        var filteredTweets = [];\n        //DO I need to do this? Really strange! Query doesn't work on per user bases\n        __.each(searchTerms, function(term){\n            console.log(\"search on term:\" , term);\n            term = term.toLowerCase().trim();\n            var temp = __.filter(tweets, function(tweet) {\n                //console.log(tweet); \n                if(tweet.text.toLowerCase().indexOf(\"@\") < 0 && containsWord(tweet.text, term)) \n                    return tweet; \n                } \n            );\n            if(temp.length > 0)\n            filteredTweets.push(temp);\n        })\n        filteredTweets =  __.flatten(filteredTweets);\n       \n        var value = {\n            observedState : filteredTweets.length > 0 && !ignoreFirstSearch ? \"Found\" : \"Not Found\",\n            rawData :{}\n        }\n        if(latestTweet && latestTweet.id)\n          value.rawData[\"since_id\"] = latestTweet.id;\n        else if(since_id)\n            value.rawData[\"since_id\"] = since_id;\n        if(ignoreFirstSearch){\n            value.rawData[\"count\"] = 0;\n            value.rawData[\"tweets\"] = [];\n        } else {\n            value.rawData[\"count\"] = filteredTweets.length;\n            value.rawData[\"tweets\"] = filteredTweets\n        }\n        send(null, value);\n        });\n    } catch(err){\n        send(err);\n}\n} else {\n     send(new Error(\"Missing search term\"));\n}",
  "metadata": {
    "author": "Waylay",
    "category": "Social",
    "description": "Search tweets sensor\n\nInput paramters are:\n<ul>\n<li>search terms, that is required input</li>\n<li>user, if left empty it will search all tweets</li>\n<li>ignoreFirstSearch, should the first search be ignored, default is false</li>\n</ul>\n",
    "documentationURL": "https://dev.twitter.com/rest/reference/get/search/tweets",
    "iconURL": "https://static.waylay.io/plugs/icons/search-tweets.png",
    "supportedStates": [
      "Found",
      "Not Found"
    ],
    "requiredProperties": [
      "searchTerms",
      "user",
      "ignoreFirstSearch"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "tweets",
        "dataType": "string[]"
      },
      {
        "parameter": "since_id",
        "dataType": "double"
      },
      {
        "parameter": "count",
        "dataType": "double"
      }
    ]
  }
}
