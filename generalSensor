{
  "name": "generalSensor",
  "version": "0.0.10",
  "type": "sensor",
  "script": "var parameter = options.requiredProperties.parameter;\nvar upperBound = options.requiredProperties.upperBound;\nvar lowerBound = options.requiredProperties.lowerBound;\nvar resource = options.requiredProperties.resource || waylayUtil.getResource(options);\nvar runtimeParam;\n\nvar sendResult = function(){\n    console.log(\"runtime=\" + runtimeParam +\", upperBound= \"+upperBound+\", lowerBound=\"+lowerBound);\n    var value = {\n        observedState : \"In Range\",\n        rawData: {\n            parameter: runtimeParam,\n            lowerBound: lowerBound,\n            upperBound: upperBound\n        }\n    }\n    if(runtimeParam > upperBound)\n        value.observedState = \"Above\";\n    else if(runtimeParam < lowerBound)\n        value.observedState = \"Below\";\n    send(null, value);\n}\n\ntry {\n    if(upperBound === undefined  || lowerBound === undefined || parameter === undefined){\n        send(new Error(\"missing properties\"))\n    } else {\n        runtimeParam = waylayUtil.getStreamData(options, parameter);\n        if(runtimeParam !== undefined){\n            console.log(\"runtime data : \" + runtimeParam);\n            sendResult();\n        } else{\n            if(resource !== undefined)  {\n                \n                waylay.data.getLastMetric(resource, parameter)\n                 .then(function(rawData){\n                    console.log(\"check the cloud cache \", rawData)\n                    runtimeParam = rawData[parameter];\n                    if(!isNaN(runtimeParam)){\n                        sendResult();\n                    } else {\n                        if(runtimeParam === undefined)\n                            send(new Error(\"Parameter \" +  parameter + \" not found\"));\n                        else\n                            send(new Error(\"Parameter \" +  runtimeParam + \" not a number\"));\n                    }\n                  })\n                  .catch ( function (err) {\n                      send(new Error(\"Could not fetch \" + parameter + \".\" + err))\n                  }) \n            } else{\n                 send(new Error(\"Missing properties\"));\n            }\n        }\n    }\n} catch(err){\n    send(new Error(err));   \n}",
  "metadata": {
    "author": "Veselin",
    "category": "Waylay",
    "description": "Range sensor that can be used either as a stream sensor or as a polling sensor.\nIn case of the polling, it tries to read the data from the waylaycache.\n\nInput paramters are:\n<ul>\n<li>parameter (runtime name)</li>\n<li>upperBound</li>\n<li>lowerBound</li>\n</ul>\n\n",
    "documentationURL": "",
    "iconURL": "https://static.waylay.io/plugs/icons/iot.png",
    "supportedStates": [
      "In Range",
      "Below",
      "Above"
    ],
    "requiredProperties": [
      "parameter",
      "upperBound",
      "lowerBound"
    ],
    "requiredRawData": [],
    "rawData": [
      {
        "parameter": "parameter",
        "dataType": "double"
      },
      {
        "parameter": "upperBound",
        "dataType": "double"
      },
      {
        "parameter": "lowerBound",
        "dataType": "double"
      }
    ]
  }
}
